
Final_project_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001364  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08001504  08001504  00011504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001558  08001558  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08001558  08001558  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001558  08001558  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001558  08001558  00011558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800155c  0800155c  0001155c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08001560  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000006c  080015cc  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  080015cc  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000017bf  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006c4  00000000  00000000  0002185b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000180  00000000  00000000  00021f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000128  00000000  00000000  000220a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000147b9  00000000  00000000  000221c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000014b4  00000000  00000000  00036981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000822c4  00000000  00000000  00037e35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ba0f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000880  00000000  00000000  000ba14c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080014ec 	.word	0x080014ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	080014ec 	.word	0x080014ec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <DMA_SetConfigurations>:




void DMA_SetConfigurations(DmaConfig_t* ptr)
{
 8000280:	b490      	push	{r4, r7}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	// clear all interrupt flags
	DMA->LIFCR = 0xFF;
 8000288:	4b5b      	ldr	r3, [pc, #364]	; (80003f8 <DMA_SetConfigurations+0x178>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	22ff      	movs	r2, #255	; 0xff
 800028e:	609a      	str	r2, [r3, #8]
	DMA->HIFCR = 0xFF;
 8000290:	4b59      	ldr	r3, [pc, #356]	; (80003f8 <DMA_SetConfigurations+0x178>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	22ff      	movs	r2, #255	; 0xff
 8000296:	60da      	str	r2, [r3, #12]


	DMA = (DMA_REG*)ptr->peripheral_Id;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	461a      	mov	r2, r3
 800029e:	4b56      	ldr	r3, [pc, #344]	; (80003f8 <DMA_SetConfigurations+0x178>)
 80002a0:	601a      	str	r2, [r3, #0]
	// set peripheral address
	DMA->S[ptr->streamId][SxPAR] = ptr->scr_address;
 80002a2:	4b55      	ldr	r3, [pc, #340]	; (80003f8 <DMA_SetConfigurations+0x178>)
 80002a4:	6818      	ldr	r0, [r3, #0]
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	791b      	ldrb	r3, [r3, #4]
 80002aa:	461a      	mov	r2, r3
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	6899      	ldr	r1, [r3, #8]
 80002b0:	3201      	adds	r2, #1
 80002b2:	4613      	mov	r3, r2
 80002b4:	005b      	lsls	r3, r3, #1
 80002b6:	4413      	add	r3, r2
 80002b8:	00db      	lsls	r3, r3, #3
 80002ba:	4403      	add	r3, r0
 80002bc:	6019      	str	r1, [r3, #0]
	// set memory address
	DMA->S[ptr->streamId][SxM0AR] = ptr->dest_address;
 80002be:	4b4e      	ldr	r3, [pc, #312]	; (80003f8 <DMA_SetConfigurations+0x178>)
 80002c0:	6819      	ldr	r1, [r3, #0]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	791b      	ldrb	r3, [r3, #4]
 80002c6:	4618      	mov	r0, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	68da      	ldr	r2, [r3, #12]
 80002cc:	4603      	mov	r3, r0
 80002ce:	005b      	lsls	r3, r3, #1
 80002d0:	4403      	add	r3, r0
 80002d2:	00db      	lsls	r3, r3, #3
 80002d4:	440b      	add	r3, r1
 80002d6:	331c      	adds	r3, #28
 80002d8:	601a      	str	r2, [r3, #0]
	// config total number of items to be sent
	DMA->S[ptr->streamId][SxNDTR] = ptr->numberOfTransfers;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	7c58      	ldrb	r0, [r3, #17]
 80002de:	4b46      	ldr	r3, [pc, #280]	; (80003f8 <DMA_SetConfigurations+0x178>)
 80002e0:	681a      	ldr	r2, [r3, #0]
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	791b      	ldrb	r3, [r3, #4]
 80002e6:	4619      	mov	r1, r3
 80002e8:	460b      	mov	r3, r1
 80002ea:	005b      	lsls	r3, r3, #1
 80002ec:	440b      	add	r3, r1
 80002ee:	00db      	lsls	r3, r3, #3
 80002f0:	4413      	add	r3, r2
 80002f2:	3314      	adds	r3, #20
 80002f4:	6018      	str	r0, [r3, #0]

	DMA->S[ptr->streamId][SxCR] = (ptr->channel_Id<<25)|(ptr->stream_priority<<16)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	795b      	ldrb	r3, [r3, #5]
 80002fa:	065a      	lsls	r2, r3, #25
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	7c1b      	ldrb	r3, [r3, #16]
 8000300:	041b      	lsls	r3, r3, #16
 8000302:	431a      	orrs	r2, r3
				|(ptr->transferMode<<6)|((ptr->transferItemSize>>4)<<13)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	7d1b      	ldrb	r3, [r3, #20]
 8000308:	019b      	lsls	r3, r3, #6
 800030a:	431a      	orrs	r2, r3
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	7c9b      	ldrb	r3, [r3, #18]
 8000310:	091b      	lsrs	r3, r3, #4
 8000312:	b2db      	uxtb	r3, r3
 8000314:	035b      	lsls	r3, r3, #13
 8000316:	431a      	orrs	r2, r3
				|((ptr->transferItemSize>>4)<<11)|(BURST_INC4<<21)|(BURST_INC4<<23)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	7c9b      	ldrb	r3, [r3, #18]
 800031c:	091b      	lsrs	r3, r3, #4
 800031e:	b2db      	uxtb	r3, r3
 8000320:	02db      	lsls	r3, r3, #11
 8000322:	4313      	orrs	r3, r2
 8000324:	f443 0220 	orr.w	r2, r3, #10485760	; 0xa00000
				|(ptr->flow_control<<5);
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	7cdb      	ldrb	r3, [r3, #19]
 800032c:	015b      	lsls	r3, r3, #5
 800032e:	ea42 0003 	orr.w	r0, r2, r3
	DMA->S[ptr->streamId][SxCR] = (ptr->channel_Id<<25)|(ptr->stream_priority<<16)
 8000332:	4b31      	ldr	r3, [pc, #196]	; (80003f8 <DMA_SetConfigurations+0x178>)
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	791b      	ldrb	r3, [r3, #4]
 800033a:	4619      	mov	r1, r3
 800033c:	460b      	mov	r3, r1
 800033e:	005b      	lsls	r3, r3, #1
 8000340:	440b      	add	r3, r1
 8000342:	00db      	lsls	r3, r3, #3
 8000344:	4413      	add	r3, r2
 8000346:	3310      	adds	r3, #16
 8000348:	6018      	str	r0, [r3, #0]


	if(ptr->interruptID != NO_INT)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	7d5b      	ldrb	r3, [r3, #21]
 800034e:	2bff      	cmp	r3, #255	; 0xff
 8000350:	d01d      	beq.n	800038e <DMA_SetConfigurations+0x10e>
	{
		DMA->S[ptr->streamId][SxCR] |= (ptr->interruptID<<2); // enable interrupt
 8000352:	4b29      	ldr	r3, [pc, #164]	; (80003f8 <DMA_SetConfigurations+0x178>)
 8000354:	681a      	ldr	r2, [r3, #0]
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	791b      	ldrb	r3, [r3, #4]
 800035a:	4619      	mov	r1, r3
 800035c:	460b      	mov	r3, r1
 800035e:	005b      	lsls	r3, r3, #1
 8000360:	440b      	add	r3, r1
 8000362:	00db      	lsls	r3, r3, #3
 8000364:	4413      	add	r3, r2
 8000366:	3310      	adds	r3, #16
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	687a      	ldr	r2, [r7, #4]
 800036c:	7d52      	ldrb	r2, [r2, #21]
 800036e:	0092      	lsls	r2, r2, #2
 8000370:	4614      	mov	r4, r2
 8000372:	4a21      	ldr	r2, [pc, #132]	; (80003f8 <DMA_SetConfigurations+0x178>)
 8000374:	6811      	ldr	r1, [r2, #0]
 8000376:	687a      	ldr	r2, [r7, #4]
 8000378:	7912      	ldrb	r2, [r2, #4]
 800037a:	4610      	mov	r0, r2
 800037c:	ea43 0204 	orr.w	r2, r3, r4
 8000380:	4603      	mov	r3, r0
 8000382:	005b      	lsls	r3, r3, #1
 8000384:	4403      	add	r3, r0
 8000386:	00db      	lsls	r3, r3, #3
 8000388:	440b      	add	r3, r1
 800038a:	3310      	adds	r3, #16
 800038c:	601a      	str	r2, [r3, #0]
	}


		/* use FIFO - Burst mode */
	if(ptr->numberOfTransfers > 1) {
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	7c5b      	ldrb	r3, [r3, #17]
 8000392:	2b01      	cmp	r3, #1
 8000394:	d92b      	bls.n	80003ee <DMA_SetConfigurations+0x16e>
		DMA->S[ptr->streamId][SxCR] |= (PERIPHERAL_MEM_INC<<9);
 8000396:	4b18      	ldr	r3, [pc, #96]	; (80003f8 <DMA_SetConfigurations+0x178>)
 8000398:	681a      	ldr	r2, [r3, #0]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	791b      	ldrb	r3, [r3, #4]
 800039e:	4619      	mov	r1, r3
 80003a0:	460b      	mov	r3, r1
 80003a2:	005b      	lsls	r3, r3, #1
 80003a4:	440b      	add	r3, r1
 80003a6:	00db      	lsls	r3, r3, #3
 80003a8:	4413      	add	r3, r2
 80003aa:	3310      	adds	r3, #16
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4a12      	ldr	r2, [pc, #72]	; (80003f8 <DMA_SetConfigurations+0x178>)
 80003b0:	6811      	ldr	r1, [r2, #0]
 80003b2:	687a      	ldr	r2, [r7, #4]
 80003b4:	7912      	ldrb	r2, [r2, #4]
 80003b6:	4610      	mov	r0, r2
 80003b8:	f443 62c0 	orr.w	r2, r3, #1536	; 0x600
 80003bc:	4603      	mov	r3, r0
 80003be:	005b      	lsls	r3, r3, #1
 80003c0:	4403      	add	r3, r0
 80003c2:	00db      	lsls	r3, r3, #3
 80003c4:	440b      	add	r3, r1
 80003c6:	3310      	adds	r3, #16
 80003c8:	601a      	str	r2, [r3, #0]
		DMA->S[ptr->streamId][SxFCR] = (1<<2)|((ptr->transferItemSize&0x0f)<<0);
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	7c9b      	ldrb	r3, [r3, #18]
 80003ce:	f003 030b 	and.w	r3, r3, #11
 80003d2:	f043 0004 	orr.w	r0, r3, #4
 80003d6:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <DMA_SetConfigurations+0x178>)
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	791b      	ldrb	r3, [r3, #4]
 80003de:	4619      	mov	r1, r3
 80003e0:	460b      	mov	r3, r1
 80003e2:	005b      	lsls	r3, r3, #1
 80003e4:	440b      	add	r3, r1
 80003e6:	00db      	lsls	r3, r3, #3
 80003e8:	4413      	add	r3, r2
 80003ea:	3324      	adds	r3, #36	; 0x24
 80003ec:	6018      	str	r0, [r3, #0]
	}
}
 80003ee:	bf00      	nop
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc90      	pop	{r4, r7}
 80003f6:	4770      	bx	lr
 80003f8:	20000098 	.word	0x20000098

080003fc <DMA_Init>:

/*
 * General init of DMA (DMA clock, DMA NVIC interrupt)
 */
void DMA_Init(unsigned char peripheral_id)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	4603      	mov	r3, r0
 8000404:	71fb      	strb	r3, [r7, #7]
	if(peripheral_id == RCC_DMA1)
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	2b15      	cmp	r3, #21
 800040a:	d120      	bne.n	800044e <DMA_Init+0x52>
	{
			/* Enable interrupts from NVIC */
		DMA_EnableNVICInterrupt(DMA1_Stream0,0);
 800040c:	2100      	movs	r1, #0
 800040e:	200b      	movs	r0, #11
 8000410:	f000 f97c 	bl	800070c <DMA_EnableNVICInterrupt>
		DMA_EnableNVICInterrupt(DMA1_Stream1,0);
 8000414:	2100      	movs	r1, #0
 8000416:	200c      	movs	r0, #12
 8000418:	f000 f978 	bl	800070c <DMA_EnableNVICInterrupt>
		DMA_EnableNVICInterrupt(DMA1_Stream2,0);
 800041c:	2100      	movs	r1, #0
 800041e:	200d      	movs	r0, #13
 8000420:	f000 f974 	bl	800070c <DMA_EnableNVICInterrupt>
		DMA_EnableNVICInterrupt(DMA1_Stream3,0);
 8000424:	2100      	movs	r1, #0
 8000426:	200e      	movs	r0, #14
 8000428:	f000 f970 	bl	800070c <DMA_EnableNVICInterrupt>
		DMA_EnableNVICInterrupt(DMA1_Stream4,0);
 800042c:	2100      	movs	r1, #0
 800042e:	200f      	movs	r0, #15
 8000430:	f000 f96c 	bl	800070c <DMA_EnableNVICInterrupt>
		DMA_EnableNVICInterrupt(DMA1_Stream5,0);
 8000434:	2100      	movs	r1, #0
 8000436:	2010      	movs	r0, #16
 8000438:	f000 f968 	bl	800070c <DMA_EnableNVICInterrupt>
		DMA_EnableNVICInterrupt(DMA1_Stream6,0);
 800043c:	2100      	movs	r1, #0
 800043e:	2011      	movs	r0, #17
 8000440:	f000 f964 	bl	800070c <DMA_EnableNVICInterrupt>
		DMA_EnableNVICInterrupt(DMA1_Stream7,1);
 8000444:	2101      	movs	r1, #1
 8000446:	202f      	movs	r0, #47	; 0x2f
 8000448:	f000 f960 	bl	800070c <DMA_EnableNVICInterrupt>
 800044c:	e01f      	b.n	800048e <DMA_Init+0x92>

	}
	else
	{
		/* Enable interrupts from NVIC */
		DMA_EnableNVICInterrupt(DMA2_Stream0,1);
 800044e:	2101      	movs	r1, #1
 8000450:	2038      	movs	r0, #56	; 0x38
 8000452:	f000 f95b 	bl	800070c <DMA_EnableNVICInterrupt>
		DMA_EnableNVICInterrupt(DMA2_Stream1,1);
 8000456:	2101      	movs	r1, #1
 8000458:	2039      	movs	r0, #57	; 0x39
 800045a:	f000 f957 	bl	800070c <DMA_EnableNVICInterrupt>
		DMA_EnableNVICInterrupt(DMA2_Stream2,1);
 800045e:	2101      	movs	r1, #1
 8000460:	203a      	movs	r0, #58	; 0x3a
 8000462:	f000 f953 	bl	800070c <DMA_EnableNVICInterrupt>
		DMA_EnableNVICInterrupt(DMA2_Stream3,1);
 8000466:	2101      	movs	r1, #1
 8000468:	203b      	movs	r0, #59	; 0x3b
 800046a:	f000 f94f 	bl	800070c <DMA_EnableNVICInterrupt>
		DMA_EnableNVICInterrupt(DMA2_Stream4,1);
 800046e:	2101      	movs	r1, #1
 8000470:	203c      	movs	r0, #60	; 0x3c
 8000472:	f000 f94b 	bl	800070c <DMA_EnableNVICInterrupt>
		DMA_EnableNVICInterrupt(DMA2_Stream5,2);
 8000476:	2102      	movs	r1, #2
 8000478:	2044      	movs	r0, #68	; 0x44
 800047a:	f000 f947 	bl	800070c <DMA_EnableNVICInterrupt>
		DMA_EnableNVICInterrupt(DMA2_Stream6,2);
 800047e:	2102      	movs	r1, #2
 8000480:	2045      	movs	r0, #69	; 0x45
 8000482:	f000 f943 	bl	800070c <DMA_EnableNVICInterrupt>
		DMA_EnableNVICInterrupt(DMA2_Stream7,2);
 8000486:	2102      	movs	r1, #2
 8000488:	2046      	movs	r0, #70	; 0x46
 800048a:	f000 f93f 	bl	800070c <DMA_EnableNVICInterrupt>
	}


	/* Enable RCC clk selected DMA */
	DMA_EnableClk(peripheral_id);
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	4618      	mov	r0, r3
 8000492:	f000 f923 	bl	80006dc <DMA_EnableClk>
}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
	...

080004a0 <DMA_StartTransfer>:


void DMA_StartTransfer(unsigned char stream_id)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	71fb      	strb	r3, [r7, #7]
	// enable the dma to operate according to the predefined configurations
	DMA->S[stream_id][SxCR] |= 1;
 80004aa:	4b0e      	ldr	r3, [pc, #56]	; (80004e4 <DMA_StartTransfer+0x44>)
 80004ac:	6819      	ldr	r1, [r3, #0]
 80004ae:	79fa      	ldrb	r2, [r7, #7]
 80004b0:	4613      	mov	r3, r2
 80004b2:	005b      	lsls	r3, r3, #1
 80004b4:	4413      	add	r3, r2
 80004b6:	00db      	lsls	r3, r3, #3
 80004b8:	440b      	add	r3, r1
 80004ba:	3310      	adds	r3, #16
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a09      	ldr	r2, [pc, #36]	; (80004e4 <DMA_StartTransfer+0x44>)
 80004c0:	6810      	ldr	r0, [r2, #0]
 80004c2:	79fa      	ldrb	r2, [r7, #7]
 80004c4:	f043 0101 	orr.w	r1, r3, #1
 80004c8:	4613      	mov	r3, r2
 80004ca:	005b      	lsls	r3, r3, #1
 80004cc:	4413      	add	r3, r2
 80004ce:	00db      	lsls	r3, r3, #3
 80004d0:	4403      	add	r3, r0
 80004d2:	3310      	adds	r3, #16
 80004d4:	6019      	str	r1, [r3, #0]
}
 80004d6:	bf00      	nop
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	20000098 	.word	0x20000098

080004e8 <DMA_EnterCriticalSection>:


void DMA_EnterCriticalSection(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
	DMA->S[0][SxCR] &= ~(1<<4);
 80004ec:	4b25      	ldr	r3, [pc, #148]	; (8000584 <DMA_EnterCriticalSection+0x9c>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	691a      	ldr	r2, [r3, #16]
 80004f2:	4b24      	ldr	r3, [pc, #144]	; (8000584 <DMA_EnterCriticalSection+0x9c>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f022 0210 	bic.w	r2, r2, #16
 80004fa:	611a      	str	r2, [r3, #16]
	DMA->S[1][SxCR] &= ~(1<<4);
 80004fc:	4b21      	ldr	r3, [pc, #132]	; (8000584 <DMA_EnterCriticalSection+0x9c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000502:	4b20      	ldr	r3, [pc, #128]	; (8000584 <DMA_EnterCriticalSection+0x9c>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f022 0210 	bic.w	r2, r2, #16
 800050a:	629a      	str	r2, [r3, #40]	; 0x28
	DMA->S[2][SxCR] &= ~(1<<4);
 800050c:	4b1d      	ldr	r3, [pc, #116]	; (8000584 <DMA_EnterCriticalSection+0x9c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000512:	4b1c      	ldr	r3, [pc, #112]	; (8000584 <DMA_EnterCriticalSection+0x9c>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	f022 0210 	bic.w	r2, r2, #16
 800051a:	641a      	str	r2, [r3, #64]	; 0x40
	DMA->S[3][SxCR] &= ~(1<<4);
 800051c:	4b19      	ldr	r3, [pc, #100]	; (8000584 <DMA_EnterCriticalSection+0x9c>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000522:	4b18      	ldr	r3, [pc, #96]	; (8000584 <DMA_EnterCriticalSection+0x9c>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f022 0210 	bic.w	r2, r2, #16
 800052a:	659a      	str	r2, [r3, #88]	; 0x58
	DMA->S[4][SxCR] &= ~(1<<4);
 800052c:	4b15      	ldr	r3, [pc, #84]	; (8000584 <DMA_EnterCriticalSection+0x9c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000532:	4b14      	ldr	r3, [pc, #80]	; (8000584 <DMA_EnterCriticalSection+0x9c>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f022 0210 	bic.w	r2, r2, #16
 800053a:	671a      	str	r2, [r3, #112]	; 0x70
	DMA->S[5][SxCR] &= ~(1<<4);
 800053c:	4b11      	ldr	r3, [pc, #68]	; (8000584 <DMA_EnterCriticalSection+0x9c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000544:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <DMA_EnterCriticalSection+0x9c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f022 0210 	bic.w	r2, r2, #16
 800054c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	DMA->S[6][SxCR] &= ~(1<<4);
 8000550:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <DMA_EnterCriticalSection+0x9c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8000558:	4b0a      	ldr	r3, [pc, #40]	; (8000584 <DMA_EnterCriticalSection+0x9c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f022 0210 	bic.w	r2, r2, #16
 8000560:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	DMA->S[7][SxCR] &= ~(1<<4);
 8000564:	4b07      	ldr	r3, [pc, #28]	; (8000584 <DMA_EnterCriticalSection+0x9c>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800056c:	4b05      	ldr	r3, [pc, #20]	; (8000584 <DMA_EnterCriticalSection+0x9c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f022 0210 	bic.w	r2, r2, #16
 8000574:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	20000098 	.word	0x20000098

08000588 <DMA_ExitCriticalSection>:


void DMA_ExitCriticalSection(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
	DMA->S[0][SxCR] |= (1<<4);
 800058c:	4b25      	ldr	r3, [pc, #148]	; (8000624 <DMA_ExitCriticalSection+0x9c>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	691a      	ldr	r2, [r3, #16]
 8000592:	4b24      	ldr	r3, [pc, #144]	; (8000624 <DMA_ExitCriticalSection+0x9c>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f042 0210 	orr.w	r2, r2, #16
 800059a:	611a      	str	r2, [r3, #16]
	DMA->S[1][SxCR] |= (1<<4);
 800059c:	4b21      	ldr	r3, [pc, #132]	; (8000624 <DMA_ExitCriticalSection+0x9c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80005a2:	4b20      	ldr	r3, [pc, #128]	; (8000624 <DMA_ExitCriticalSection+0x9c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f042 0210 	orr.w	r2, r2, #16
 80005aa:	629a      	str	r2, [r3, #40]	; 0x28
	DMA->S[2][SxCR] |= (1<<4);
 80005ac:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <DMA_ExitCriticalSection+0x9c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005b2:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <DMA_ExitCriticalSection+0x9c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f042 0210 	orr.w	r2, r2, #16
 80005ba:	641a      	str	r2, [r3, #64]	; 0x40
	DMA->S[3][SxCR] |= (1<<4);
 80005bc:	4b19      	ldr	r3, [pc, #100]	; (8000624 <DMA_ExitCriticalSection+0x9c>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80005c2:	4b18      	ldr	r3, [pc, #96]	; (8000624 <DMA_ExitCriticalSection+0x9c>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f042 0210 	orr.w	r2, r2, #16
 80005ca:	659a      	str	r2, [r3, #88]	; 0x58
	DMA->S[4][SxCR] |= (1<<4);
 80005cc:	4b15      	ldr	r3, [pc, #84]	; (8000624 <DMA_ExitCriticalSection+0x9c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80005d2:	4b14      	ldr	r3, [pc, #80]	; (8000624 <DMA_ExitCriticalSection+0x9c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f042 0210 	orr.w	r2, r2, #16
 80005da:	671a      	str	r2, [r3, #112]	; 0x70
	DMA->S[5][SxCR] |= (1<<4);
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <DMA_ExitCriticalSection+0x9c>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <DMA_ExitCriticalSection+0x9c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f042 0210 	orr.w	r2, r2, #16
 80005ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	DMA->S[6][SxCR] |= (1<<4);
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <DMA_ExitCriticalSection+0x9c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <DMA_ExitCriticalSection+0x9c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f042 0210 	orr.w	r2, r2, #16
 8000600:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	DMA->S[7][SxCR] |= (1<<4);
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <DMA_ExitCriticalSection+0x9c>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <DMA_ExitCriticalSection+0x9c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f042 0210 	orr.w	r2, r2, #16
 8000614:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20000098 	.word	0x20000098

08000628 <DMA_ReadIntFlag>:





unsigned char DMA_ReadIntFlag(unsigned char interrupt_id){
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]

	if((interrupt_id &0x80) == 0)
 8000632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000636:	2b00      	cmp	r3, #0
 8000638:	db0c      	blt.n	8000654 <DMA_ReadIntFlag+0x2c>
	{
		// transfer complete interrupt
		return (DMA->LISR & (1<<interrupt_id))>> interrupt_id;
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <DMA_ReadIntFlag+0x58>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	79fa      	ldrb	r2, [r7, #7]
 8000642:	2101      	movs	r1, #1
 8000644:	fa01 f202 	lsl.w	r2, r1, r2
 8000648:	401a      	ands	r2, r3
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	fa22 f303 	lsr.w	r3, r2, r3
 8000650:	b2db      	uxtb	r3, r3
 8000652:	e00f      	b.n	8000674 <DMA_ReadIntFlag+0x4c>
	}
	else
	{
		interrupt_id = interrupt_id & (0x7f);
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800065a:	71fb      	strb	r3, [r7, #7]
		return (DMA->HISR & (1<<interrupt_id))>> interrupt_id;
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <DMA_ReadIntFlag+0x58>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	79fa      	ldrb	r2, [r7, #7]
 8000664:	2101      	movs	r1, #1
 8000666:	fa01 f202 	lsl.w	r2, r1, r2
 800066a:	401a      	ands	r2, r3
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	fa22 f303 	lsr.w	r3, r2, r3
 8000672:	b2db      	uxtb	r3, r3
	}
}
 8000674:	4618      	mov	r0, r3
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	20000098 	.word	0x20000098

08000684 <DMA_ClearIntFlag>:



void DMA_ClearIntFlag(unsigned char interrupt_id){
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]

	if((interrupt_id & 0x80) == 0)
 800068e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000692:	2b00      	cmp	r3, #0
 8000694:	db0c      	blt.n	80006b0 <DMA_ClearIntFlag+0x2c>
		DMA->LIFCR |= (1<<interrupt_id); // transfer complete interrupt
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <DMA_ClearIntFlag+0x54>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	689a      	ldr	r2, [r3, #8]
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	2101      	movs	r1, #1
 80006a0:	fa01 f303 	lsl.w	r3, r1, r3
 80006a4:	4619      	mov	r1, r3
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <DMA_ClearIntFlag+0x54>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	430a      	orrs	r2, r1
 80006ac:	609a      	str	r2, [r3, #8]
	else
		DMA->HIFCR |= (1<<(interrupt_id & 0x7F));
}
 80006ae:	e00d      	b.n	80006cc <DMA_ClearIntFlag+0x48>
		DMA->HIFCR |= (1<<(interrupt_id & 0x7F));
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <DMA_ClearIntFlag+0x54>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	68da      	ldr	r2, [r3, #12]
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006bc:	2101      	movs	r1, #1
 80006be:	fa01 f303 	lsl.w	r3, r1, r3
 80006c2:	4619      	mov	r1, r3
 80006c4:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <DMA_ClearIntFlag+0x54>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	430a      	orrs	r2, r1
 80006ca:	60da      	str	r2, [r3, #12]
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	20000098 	.word	0x20000098

080006dc <DMA_EnableClk>:


void DMA_EnableClk(unsigned char peripheral_id)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
	RCC_AHB1ENR |= 1<<peripheral_id;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <DMA_EnableClk+0x2c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	79fa      	ldrb	r2, [r7, #7]
 80006ec:	2101      	movs	r1, #1
 80006ee:	fa01 f202 	lsl.w	r2, r1, r2
 80006f2:	4611      	mov	r1, r2
 80006f4:	4a04      	ldr	r2, [pc, #16]	; (8000708 <DMA_EnableClk+0x2c>)
 80006f6:	430b      	orrs	r3, r1
 80006f8:	6013      	str	r3, [r2, #0]
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	40023830 	.word	0x40023830

0800070c <DMA_EnableNVICInterrupt>:
 * 		set_id(uint8): index of register contains this interrupt (NVIC_ISER0 -> 0)
 *
 * return: void
 */
void DMA_EnableNVICInterrupt(unsigned char interrupt_id, unsigned char set_id)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	460a      	mov	r2, r1
 8000716:	71fb      	strb	r3, [r7, #7]
 8000718:	4613      	mov	r3, r2
 800071a:	71bb      	strb	r3, [r7, #6]
	switch(set_id)
 800071c:	79bb      	ldrb	r3, [r7, #6]
 800071e:	2b02      	cmp	r3, #2
 8000720:	d022      	beq.n	8000768 <DMA_EnableNVICInterrupt+0x5c>
 8000722:	2b02      	cmp	r3, #2
 8000724:	dc2e      	bgt.n	8000784 <DMA_EnableNVICInterrupt+0x78>
 8000726:	2b00      	cmp	r3, #0
 8000728:	d002      	beq.n	8000730 <DMA_EnableNVICInterrupt+0x24>
 800072a:	2b01      	cmp	r3, #1
 800072c:	d00e      	beq.n	800074c <DMA_EnableNVICInterrupt+0x40>
		case 2:
			NVIC_ISER2 |= (1<< (interrupt_id-32*set_id));
			break;
	}

}
 800072e:	e029      	b.n	8000784 <DMA_EnableNVICInterrupt+0x78>
			NVIC_ISER0 |= (1<< (interrupt_id-32*set_id));
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <DMA_EnableNVICInterrupt+0x84>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	79f9      	ldrb	r1, [r7, #7]
 8000736:	79ba      	ldrb	r2, [r7, #6]
 8000738:	0152      	lsls	r2, r2, #5
 800073a:	1a8a      	subs	r2, r1, r2
 800073c:	2101      	movs	r1, #1
 800073e:	fa01 f202 	lsl.w	r2, r1, r2
 8000742:	4611      	mov	r1, r2
 8000744:	4a12      	ldr	r2, [pc, #72]	; (8000790 <DMA_EnableNVICInterrupt+0x84>)
 8000746:	430b      	orrs	r3, r1
 8000748:	6013      	str	r3, [r2, #0]
			break;
 800074a:	e01b      	b.n	8000784 <DMA_EnableNVICInterrupt+0x78>
			NVIC_ISER1 |= (1<< (interrupt_id-32*set_id));
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <DMA_EnableNVICInterrupt+0x88>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	79f9      	ldrb	r1, [r7, #7]
 8000752:	79ba      	ldrb	r2, [r7, #6]
 8000754:	0152      	lsls	r2, r2, #5
 8000756:	1a8a      	subs	r2, r1, r2
 8000758:	2101      	movs	r1, #1
 800075a:	fa01 f202 	lsl.w	r2, r1, r2
 800075e:	4611      	mov	r1, r2
 8000760:	4a0c      	ldr	r2, [pc, #48]	; (8000794 <DMA_EnableNVICInterrupt+0x88>)
 8000762:	430b      	orrs	r3, r1
 8000764:	6013      	str	r3, [r2, #0]
			break;
 8000766:	e00d      	b.n	8000784 <DMA_EnableNVICInterrupt+0x78>
			NVIC_ISER2 |= (1<< (interrupt_id-32*set_id));
 8000768:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <DMA_EnableNVICInterrupt+0x8c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	79f9      	ldrb	r1, [r7, #7]
 800076e:	79ba      	ldrb	r2, [r7, #6]
 8000770:	0152      	lsls	r2, r2, #5
 8000772:	1a8a      	subs	r2, r1, r2
 8000774:	2101      	movs	r1, #1
 8000776:	fa01 f202 	lsl.w	r2, r1, r2
 800077a:	4611      	mov	r1, r2
 800077c:	4a06      	ldr	r2, [pc, #24]	; (8000798 <DMA_EnableNVICInterrupt+0x8c>)
 800077e:	430b      	orrs	r3, r1
 8000780:	6013      	str	r3, [r2, #0]
			break;
 8000782:	bf00      	nop
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000e100 	.word	0xe000e100
 8000794:	e000e104 	.word	0xe000e104
 8000798:	e000e108 	.word	0xe000e108

0800079c <DMA2_Stream5_IRQHandler>:



extern void App_TransferNotification(void);

void DMA2_Stream5_IRQHandler(void) {
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0

	if (DMA_ReadIntFlag(TRANSFER_COMPLETE_S5))
 80007a0:	208b      	movs	r0, #139	; 0x8b
 80007a2:	f7ff ff41 	bl	8000628 <DMA_ReadIntFlag>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d00f      	beq.n	80007cc <DMA2_Stream5_IRQHandler+0x30>
	{
		App_TransferNotification();
 80007ac:	f000 f9f6 	bl	8000b9c <App_TransferNotification>
		GPIO_Init(PORTA,PIN0,OUTPUT_PUSHPULL);
 80007b0:	2210      	movs	r2, #16
 80007b2:	2100      	movs	r1, #0
 80007b4:	2000      	movs	r0, #0
 80007b6:	f000 f841 	bl	800083c <GPIO_Init>
		GPIO_WritePin(PORTA, PIN0, 1);
 80007ba:	2201      	movs	r2, #1
 80007bc:	2100      	movs	r1, #0
 80007be:	2000      	movs	r0, #0
 80007c0:	f000 f8ca 	bl	8000958 <GPIO_WritePin>
		DMA_ClearIntFlag(TRANSFER_COMPLETE_S5);
 80007c4:	208b      	movs	r0, #139	; 0x8b
 80007c6:	f7ff ff5d 	bl	8000684 <DMA_ClearIntFlag>
		// do nothing
	}



}
 80007ca:	e01c      	b.n	8000806 <DMA2_Stream5_IRQHandler+0x6a>
	else if (DMA_ReadIntFlag(TRANSFER_ERROR_S5))
 80007cc:	2089      	movs	r0, #137	; 0x89
 80007ce:	f7ff ff2b 	bl	8000628 <DMA_ReadIntFlag>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d003      	beq.n	80007e0 <DMA2_Stream5_IRQHandler+0x44>
		DMA_ClearIntFlag(TRANSFER_ERROR_S5);
 80007d8:	2089      	movs	r0, #137	; 0x89
 80007da:	f7ff ff53 	bl	8000684 <DMA_ClearIntFlag>
}
 80007de:	e012      	b.n	8000806 <DMA2_Stream5_IRQHandler+0x6a>
	else if (DMA_ReadIntFlag(HALF_TRANSFER_S5))
 80007e0:	208a      	movs	r0, #138	; 0x8a
 80007e2:	f7ff ff21 	bl	8000628 <DMA_ReadIntFlag>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d00c      	beq.n	8000806 <DMA2_Stream5_IRQHandler+0x6a>
		GPIO_Init(PORTA, PIN1, OUTPUT_PUSHPULL);
 80007ec:	2210      	movs	r2, #16
 80007ee:	2101      	movs	r1, #1
 80007f0:	2000      	movs	r0, #0
 80007f2:	f000 f823 	bl	800083c <GPIO_Init>
		GPIO_WritePin(PORTA, PIN1, 1);
 80007f6:	2201      	movs	r2, #1
 80007f8:	2101      	movs	r1, #1
 80007fa:	2000      	movs	r0, #0
 80007fc:	f000 f8ac 	bl	8000958 <GPIO_WritePin>
		DMA_ClearIntFlag(HALF_TRANSFER_S5);
 8000800:	208a      	movs	r0, #138	; 0x8a
 8000802:	f7ff ff3f 	bl	8000684 <DMA_ClearIntFlag>
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
	...

0800080c <GPIO_EnableClk>:
	(unsigned int*)GPIOB_BASE_ADDRESS
};


void GPIO_EnableClk(unsigned char portID)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
	RCC_AHB1ENR |= (1 <<portID);
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <GPIO_EnableClk+0x2c>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	79fa      	ldrb	r2, [r7, #7]
 800081c:	2101      	movs	r1, #1
 800081e:	fa01 f202 	lsl.w	r2, r1, r2
 8000822:	4611      	mov	r1, r2
 8000824:	4a04      	ldr	r2, [pc, #16]	; (8000838 <GPIO_EnableClk+0x2c>)
 8000826:	430b      	orrs	r3, r1
 8000828:	6013      	str	r3, [r2, #0]
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	40023830 	.word	0x40023830

0800083c <GPIO_Init>:

void GPIO_Init(unsigned char portID, unsigned char PIN_NO, unsigned char PIN_Dir)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
 8000846:	460b      	mov	r3, r1
 8000848:	71bb      	strb	r3, [r7, #6]
 800084a:	4613      	mov	r3, r2
 800084c:	717b      	strb	r3, [r7, #5]
	
		// clear this bit field (MODER)
		*(GPIO[portID]+0) &= ~(0x03 << (2*PIN_NO));
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	4a40      	ldr	r2, [pc, #256]	; (8000954 <GPIO_Init+0x118>)
 8000852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	79bb      	ldrb	r3, [r7, #6]
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	2103      	movs	r1, #3
 800085e:	fa01 f303 	lsl.w	r3, r1, r3
 8000862:	43db      	mvns	r3, r3
 8000864:	4618      	mov	r0, r3
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	493a      	ldr	r1, [pc, #232]	; (8000954 <GPIO_Init+0x118>)
 800086a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800086e:	4002      	ands	r2, r0
 8000870:	601a      	str	r2, [r3, #0]
		// assign value for the bit field
		*(GPIO[portID]+0) |= (PIN_Dir>>4) <<(2*PIN_NO); // 0x10
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	4a37      	ldr	r2, [pc, #220]	; (8000954 <GPIO_Init+0x118>)
 8000876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	797b      	ldrb	r3, [r7, #5]
 800087e:	091b      	lsrs	r3, r3, #4
 8000880:	b2db      	uxtb	r3, r3
 8000882:	4619      	mov	r1, r3
 8000884:	79bb      	ldrb	r3, [r7, #6]
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	fa01 f303 	lsl.w	r3, r1, r3
 800088c:	4618      	mov	r0, r3
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	4930      	ldr	r1, [pc, #192]	; (8000954 <GPIO_Init+0x118>)
 8000892:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000896:	4302      	orrs	r2, r0
 8000898:	601a      	str	r2, [r3, #0]

		if ((PIN_Dir>>4) == 0)  /* input */
 800089a:	797b      	ldrb	r3, [r7, #5]
 800089c:	091b      	lsrs	r3, r3, #4
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d129      	bne.n	80008f8 <GPIO_Init+0xbc>
		{
			// clear bit field (PUPDR)
			*(GPIO[portID]+3) &= ~(3 << (PIN_NO*2));
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	4a2b      	ldr	r2, [pc, #172]	; (8000954 <GPIO_Init+0x118>)
 80008a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ac:	330c      	adds	r3, #12
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	79bb      	ldrb	r3, [r7, #6]
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	2103      	movs	r1, #3
 80008b6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ba:	43db      	mvns	r3, r3
 80008bc:	4618      	mov	r0, r3
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	4924      	ldr	r1, [pc, #144]	; (8000954 <GPIO_Init+0x118>)
 80008c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008c6:	330c      	adds	r3, #12
 80008c8:	4002      	ands	r2, r0
 80008ca:	601a      	str	r2, [r3, #0]
			// assign value for the bit field
			*(GPIO[portID]+3) |= (PIN_Dir & 0x0f) <<(PIN_NO*2);
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	4a21      	ldr	r2, [pc, #132]	; (8000954 <GPIO_Init+0x118>)
 80008d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d4:	330c      	adds	r3, #12
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	797b      	ldrb	r3, [r7, #5]
 80008da:	f003 010f 	and.w	r1, r3, #15
 80008de:	79bb      	ldrb	r3, [r7, #6]
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	fa01 f303 	lsl.w	r3, r1, r3
 80008e6:	4618      	mov	r0, r3
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	491a      	ldr	r1, [pc, #104]	; (8000954 <GPIO_Init+0x118>)
 80008ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008f0:	330c      	adds	r3, #12
 80008f2:	4302      	orrs	r2, r0
 80008f4:	601a      	str	r2, [r3, #0]
			// assign value for the bit field
			*(GPIO[portID]+1) |= (PIN_Dir & 0x0f) <<PIN_NO;
		}

		
}
 80008f6:	e026      	b.n	8000946 <GPIO_Init+0x10a>
			*(GPIO[portID]+1) &= ~(1 << PIN_NO);
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	4a16      	ldr	r2, [pc, #88]	; (8000954 <GPIO_Init+0x118>)
 80008fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000900:	3304      	adds	r3, #4
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	79bb      	ldrb	r3, [r7, #6]
 8000906:	2101      	movs	r1, #1
 8000908:	fa01 f303 	lsl.w	r3, r1, r3
 800090c:	43db      	mvns	r3, r3
 800090e:	4618      	mov	r0, r3
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	4910      	ldr	r1, [pc, #64]	; (8000954 <GPIO_Init+0x118>)
 8000914:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000918:	3304      	adds	r3, #4
 800091a:	4002      	ands	r2, r0
 800091c:	601a      	str	r2, [r3, #0]
			*(GPIO[portID]+1) |= (PIN_Dir & 0x0f) <<PIN_NO;
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	4a0c      	ldr	r2, [pc, #48]	; (8000954 <GPIO_Init+0x118>)
 8000922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000926:	3304      	adds	r3, #4
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	797b      	ldrb	r3, [r7, #5]
 800092c:	f003 010f 	and.w	r1, r3, #15
 8000930:	79bb      	ldrb	r3, [r7, #6]
 8000932:	fa01 f303 	lsl.w	r3, r1, r3
 8000936:	4618      	mov	r0, r3
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	4906      	ldr	r1, [pc, #24]	; (8000954 <GPIO_Init+0x118>)
 800093c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000940:	3304      	adds	r3, #4
 8000942:	4302      	orrs	r2, r0
 8000944:	601a      	str	r2, [r3, #0]
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	20000000 	.word	0x20000000

08000958 <GPIO_WritePin>:

void GPIO_WritePin(unsigned char portID, unsigned char PIN_NO, unsigned char Data)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
 8000962:	460b      	mov	r3, r1
 8000964:	71bb      	strb	r3, [r7, #6]
 8000966:	4613      	mov	r3, r2
 8000968:	717b      	strb	r3, [r7, #5]
	// filtering Data
	if(Data != 0) { Data=1; }
 800096a:	797b      	ldrb	r3, [r7, #5]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <GPIO_WritePin+0x1c>
 8000970:	2301      	movs	r3, #1
 8000972:	717b      	strb	r3, [r7, #5]

	
	// clear bits (ODR)
	*(GPIO[portID]+5) &= ~(1<< PIN_NO);
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	4a15      	ldr	r2, [pc, #84]	; (80009cc <GPIO_WritePin+0x74>)
 8000978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800097c:	3314      	adds	r3, #20
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	79bb      	ldrb	r3, [r7, #6]
 8000982:	2101      	movs	r1, #1
 8000984:	fa01 f303 	lsl.w	r3, r1, r3
 8000988:	43db      	mvns	r3, r3
 800098a:	4618      	mov	r0, r3
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	490f      	ldr	r1, [pc, #60]	; (80009cc <GPIO_WritePin+0x74>)
 8000990:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000994:	3314      	adds	r3, #20
 8000996:	4002      	ands	r2, r0
 8000998:	601a      	str	r2, [r3, #0]
	// assign "Data" to bits
	*(GPIO[portID]+5) |= (Data << PIN_NO);
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <GPIO_WritePin+0x74>)
 800099e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a2:	3314      	adds	r3, #20
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	7979      	ldrb	r1, [r7, #5]
 80009a8:	79bb      	ldrb	r3, [r7, #6]
 80009aa:	fa01 f303 	lsl.w	r3, r1, r3
 80009ae:	4618      	mov	r0, r3
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	4906      	ldr	r1, [pc, #24]	; (80009cc <GPIO_WritePin+0x74>)
 80009b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009b8:	3314      	adds	r3, #20
 80009ba:	4302      	orrs	r2, r0
 80009bc:	601a      	str	r2, [r3, #0]
	
}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	20000000 	.word	0x20000000

080009d0 <UART_ReadFlag>:
#include <stdio.h>


/* read UART2 flag */
unsigned char UART_ReadFlag(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
	return (USART_SR & (1<<6)) >> 6;
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <UART_ReadFlag+0x1c>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	099b      	lsrs	r3, r3, #6
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	b2db      	uxtb	r3, r3
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	40004400 	.word	0x40004400

080009f0 <UART_BindPin>:


void UART_BindPin(void) {
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
	GPIOA_AFRL |=(0x7<<2 * 4); // put UART2 on PINA2
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <UART_BindPin+0x1c>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <UART_BindPin+0x1c>)
 80009fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80009fe:	6013      	str	r3, [r2, #0]
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40020020 	.word	0x40020020

08000a10 <UART_Init>:


void UART_Init(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0

	// enable clk on UART2
	RCC_APB1ENR |= 1<<17;
 8000a14:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <UART_Init+0x54>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a12      	ldr	r2, [pc, #72]	; (8000a64 <UART_Init+0x54>)
 8000a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a1e:	6013      	str	r3, [r2, #0]

	// baudrate define
	USART_BRR = 0x683;
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <UART_Init+0x58>)
 8000a22:	f240 6283 	movw	r2, #1667	; 0x683
 8000a26:	601a      	str	r2, [r3, #0]

	// enable UART2
	USART_CR1 |= 1<<13;
 8000a28:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <UART_Init+0x5c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a0f      	ldr	r2, [pc, #60]	; (8000a6c <UART_Init+0x5c>)
 8000a2e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a32:	6013      	str	r3, [r2, #0]

	// oversampling by 16 (default)
	USART_CR1 &= ~(1<<15);
 8000a34:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <UART_Init+0x5c>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a0c      	ldr	r2, [pc, #48]	; (8000a6c <UART_Init+0x5c>)
 8000a3a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a3e:	6013      	str	r3, [r2, #0]


	// define word size (8-bytes)
	USART_CR1 &= ~(1<<12);
 8000a40:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <UART_Init+0x5c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a09      	ldr	r2, [pc, #36]	; (8000a6c <UART_Init+0x5c>)
 8000a46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a4a:	6013      	str	r3, [r2, #0]

	// enable transmitter
	USART_CR1 |= 1<<3;
 8000a4c:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <UART_Init+0x5c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a06      	ldr	r2, [pc, #24]	; (8000a6c <UART_Init+0x5c>)
 8000a52:	f043 0308 	orr.w	r3, r3, #8
 8000a56:	6013      	str	r3, [r2, #0]

}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40023840 	.word	0x40023840
 8000a68:	40004408 	.word	0x40004408
 8000a6c:	4000440c 	.word	0x4000440c

08000a70 <UART_Transmit>:


void UART_Transmit(const char* string)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	// while the string finished
	while(*string) {
 8000a78:	e00c      	b.n	8000a94 <UART_Transmit+0x24>
		// send byte
		USART_DR = *string;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	781a      	ldrb	r2, [r3, #0]
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <UART_Transmit+0x38>)
 8000a80:	601a      	str	r2, [r3, #0]
		while(UART_ReadFlag() != 1);
 8000a82:	bf00      	nop
 8000a84:	f7ff ffa4 	bl	80009d0 <UART_ReadFlag>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d1fa      	bne.n	8000a84 <UART_Transmit+0x14>
		string++;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	3301      	adds	r3, #1
 8000a92:	607b      	str	r3, [r7, #4]
	while(*string) {
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d1ee      	bne.n	8000a7a <UART_Transmit+0xa>

	}
}
 8000a9c:	bf00      	nop
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40004404 	.word	0x40004404

08000aac <UART_PrintInt>:

void UART_PrintInt(unsigned short number)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	80fb      	strh	r3, [r7, #6]
    char str[4];
    sprintf(str,"%d",number);
 8000ab6:	88fa      	ldrh	r2, [r7, #6]
 8000ab8:	f107 030c 	add.w	r3, r7, #12
 8000abc:	4906      	ldr	r1, [pc, #24]	; (8000ad8 <UART_PrintInt+0x2c>)
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f000 f8d8 	bl	8000c74 <siprintf>
    UART_Transmit(str);
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ffd1 	bl	8000a70 <UART_Transmit>
}
 8000ace:	bf00      	nop
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	08001504 	.word	0x08001504

08000adc <main>:

#ifdef INTERRUPT


int main()
{
 8000adc:	b5b0      	push	{r4, r5, r7, lr}
 8000ade:	b088      	sub	sp, #32
 8000ae0:	af00      	add	r7, sp, #0


	DmaConfig_t config[] = {
 8000ae2:	4b29      	ldr	r3, [pc, #164]	; (8000b88 <main+0xac>)
 8000ae4:	1d3c      	adds	r4, r7, #4
 8000ae6:	461d      	mov	r5, r3
 8000ae8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aec:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000af0:	e884 0003 	stmia.w	r4, {r0, r1}
				84, _1BYTE__1_4FIFO,DMA_FLOW_CONTROL,MEM_TO_MEM, ALL
			}
	};

	// initailize scr with ones
	for(unsigned char i=0; i<100; i++) {
 8000af4:	2300      	movs	r3, #0
 8000af6:	77fb      	strb	r3, [r7, #31]
 8000af8:	e008      	b.n	8000b0c <main+0x30>
		scr[i] = (i+1);
 8000afa:	7ffb      	ldrb	r3, [r7, #31]
 8000afc:	7ffa      	ldrb	r2, [r7, #31]
 8000afe:	3201      	adds	r2, #1
 8000b00:	b2d1      	uxtb	r1, r2
 8000b02:	4a22      	ldr	r2, [pc, #136]	; (8000b8c <main+0xb0>)
 8000b04:	54d1      	strb	r1, [r2, r3]
	for(unsigned char i=0; i<100; i++) {
 8000b06:	7ffb      	ldrb	r3, [r7, #31]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	77fb      	strb	r3, [r7, #31]
 8000b0c:	7ffb      	ldrb	r3, [r7, #31]
 8000b0e:	2b63      	cmp	r3, #99	; 0x63
 8000b10:	d9f3      	bls.n	8000afa <main+0x1e>
	}

		/* Led indicator for completion of transmission */
	GPIO_EnableClk(PORTA);
 8000b12:	2000      	movs	r0, #0
 8000b14:	f7ff fe7a 	bl	800080c <GPIO_EnableClk>


	/* UART init */
	GPIO_Init(PORTA,PIN2,ALTERNATE_FUNCTION_PP);
 8000b18:	2220      	movs	r2, #32
 8000b1a:	2102      	movs	r1, #2
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f7ff fe8d 	bl	800083c <GPIO_Init>
	UART_BindPin();
 8000b22:	f7ff ff65 	bl	80009f0 <UART_BindPin>
	UART_Init();
 8000b26:	f7ff ff73 	bl	8000a10 <UART_Init>


	DMA_Init(RCC_DMA2);
 8000b2a:	2016      	movs	r0, #22
 8000b2c:	f7ff fc66 	bl	80003fc <DMA_Init>
	DMA_SetConfigurations(&config[0]);
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff fba4 	bl	8000280 <DMA_SetConfigurations>

	DMA_StartTransfer(STREAM5);
 8000b38:	2005      	movs	r0, #5
 8000b3a:	f7ff fcb1 	bl	80004a0 <DMA_StartTransfer>



	unsigned char flag = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	777b      	strb	r3, [r7, #29]
	while(1)
	{
		DMA_EnterCriticalSection();
 8000b42:	f7ff fcd1 	bl	80004e8 <DMA_EnterCriticalSection>

		flag = App_TransferStatus; /* Critical Section */
 8000b46:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <main+0xb4>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	777b      	strb	r3, [r7, #29]
		App_TransferStatus = NOT_COMPLETED;
 8000b4c:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <main+0xb4>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]

		DMA_ExitCriticalSection();
 8000b52:	f7ff fd19 	bl	8000588 <DMA_ExitCriticalSection>


		if(flag == COMPLETED)
 8000b56:	7f7b      	ldrb	r3, [r7, #29]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d1f2      	bne.n	8000b42 <main+0x66>
		{
			/* loop on destnation array and print its elements */
			for(unsigned char i=0;i<config[0].numberOfTransfers;i++)
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	77bb      	strb	r3, [r7, #30]
 8000b60:	e00c      	b.n	8000b7c <main+0xa0>
			{
				UART_PrintInt(dest[i]);
 8000b62:	7fbb      	ldrb	r3, [r7, #30]
 8000b64:	4a0b      	ldr	r2, [pc, #44]	; (8000b94 <main+0xb8>)
 8000b66:	5cd3      	ldrb	r3, [r2, r3]
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff ff9e 	bl	8000aac <UART_PrintInt>
				UART_Transmit("\r\n");
 8000b70:	4809      	ldr	r0, [pc, #36]	; (8000b98 <main+0xbc>)
 8000b72:	f7ff ff7d 	bl	8000a70 <UART_Transmit>
			for(unsigned char i=0;i<config[0].numberOfTransfers;i++)
 8000b76:	7fbb      	ldrb	r3, [r7, #30]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	77bb      	strb	r3, [r7, #30]
 8000b7c:	7d7b      	ldrb	r3, [r7, #21]
 8000b7e:	7fba      	ldrb	r2, [r7, #30]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d3ee      	bcc.n	8000b62 <main+0x86>
		DMA_EnterCriticalSection();
 8000b84:	e7dd      	b.n	8000b42 <main+0x66>
 8000b86:	bf00      	nop
 8000b88:	0800150c 	.word	0x0800150c
 8000b8c:	20000100 	.word	0x20000100
 8000b90:	20000088 	.word	0x20000088
 8000b94:	2000009c 	.word	0x2000009c
 8000b98:	08001508 	.word	0x08001508

08000b9c <App_TransferNotification>:




void App_TransferNotification(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
	App_TransferStatus = COMPLETED;
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <App_TransferNotification+0x14>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	601a      	str	r2, [r3, #0]
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	20000088 	.word	0x20000088

08000bb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <SystemInit+0x20>)
 8000bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bbe:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <SystemInit+0x20>)
 8000bc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bdc:	480d      	ldr	r0, [pc, #52]	; (8000c14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bde:	490e      	ldr	r1, [pc, #56]	; (8000c18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000be0:	4a0e      	ldr	r2, [pc, #56]	; (8000c1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be4:	e002      	b.n	8000bec <LoopCopyDataInit>

08000be6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bea:	3304      	adds	r3, #4

08000bec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf0:	d3f9      	bcc.n	8000be6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf2:	4a0b      	ldr	r2, [pc, #44]	; (8000c20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bf4:	4c0b      	ldr	r4, [pc, #44]	; (8000c24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf8:	e001      	b.n	8000bfe <LoopFillZerobss>

08000bfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bfc:	3204      	adds	r2, #4

08000bfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c00:	d3fb      	bcc.n	8000bfa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c02:	f7ff ffd7 	bl	8000bb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c06:	f000 f811 	bl	8000c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c0a:	f7ff ff67 	bl	8000adc <main>
  bx  lr    
 8000c0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c10:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c18:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c1c:	08001560 	.word	0x08001560
  ldr r2, =_sbss
 8000c20:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c24:	20000174 	.word	0x20000174

08000c28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c28:	e7fe      	b.n	8000c28 <ADC_IRQHandler>
	...

08000c2c <__libc_init_array>:
 8000c2c:	b570      	push	{r4, r5, r6, lr}
 8000c2e:	4d0d      	ldr	r5, [pc, #52]	; (8000c64 <__libc_init_array+0x38>)
 8000c30:	4c0d      	ldr	r4, [pc, #52]	; (8000c68 <__libc_init_array+0x3c>)
 8000c32:	1b64      	subs	r4, r4, r5
 8000c34:	10a4      	asrs	r4, r4, #2
 8000c36:	2600      	movs	r6, #0
 8000c38:	42a6      	cmp	r6, r4
 8000c3a:	d109      	bne.n	8000c50 <__libc_init_array+0x24>
 8000c3c:	4d0b      	ldr	r5, [pc, #44]	; (8000c6c <__libc_init_array+0x40>)
 8000c3e:	4c0c      	ldr	r4, [pc, #48]	; (8000c70 <__libc_init_array+0x44>)
 8000c40:	f000 fc54 	bl	80014ec <_init>
 8000c44:	1b64      	subs	r4, r4, r5
 8000c46:	10a4      	asrs	r4, r4, #2
 8000c48:	2600      	movs	r6, #0
 8000c4a:	42a6      	cmp	r6, r4
 8000c4c:	d105      	bne.n	8000c5a <__libc_init_array+0x2e>
 8000c4e:	bd70      	pop	{r4, r5, r6, pc}
 8000c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c54:	4798      	blx	r3
 8000c56:	3601      	adds	r6, #1
 8000c58:	e7ee      	b.n	8000c38 <__libc_init_array+0xc>
 8000c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c5e:	4798      	blx	r3
 8000c60:	3601      	adds	r6, #1
 8000c62:	e7f2      	b.n	8000c4a <__libc_init_array+0x1e>
 8000c64:	08001558 	.word	0x08001558
 8000c68:	08001558 	.word	0x08001558
 8000c6c:	08001558 	.word	0x08001558
 8000c70:	0800155c 	.word	0x0800155c

08000c74 <siprintf>:
 8000c74:	b40e      	push	{r1, r2, r3}
 8000c76:	b500      	push	{lr}
 8000c78:	b09c      	sub	sp, #112	; 0x70
 8000c7a:	ab1d      	add	r3, sp, #116	; 0x74
 8000c7c:	9002      	str	r0, [sp, #8]
 8000c7e:	9006      	str	r0, [sp, #24]
 8000c80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000c84:	4809      	ldr	r0, [pc, #36]	; (8000cac <siprintf+0x38>)
 8000c86:	9107      	str	r1, [sp, #28]
 8000c88:	9104      	str	r1, [sp, #16]
 8000c8a:	4909      	ldr	r1, [pc, #36]	; (8000cb0 <siprintf+0x3c>)
 8000c8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000c90:	9105      	str	r1, [sp, #20]
 8000c92:	6800      	ldr	r0, [r0, #0]
 8000c94:	9301      	str	r3, [sp, #4]
 8000c96:	a902      	add	r1, sp, #8
 8000c98:	f000 f868 	bl	8000d6c <_svfiprintf_r>
 8000c9c:	9b02      	ldr	r3, [sp, #8]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
 8000ca2:	b01c      	add	sp, #112	; 0x70
 8000ca4:	f85d eb04 	ldr.w	lr, [sp], #4
 8000ca8:	b003      	add	sp, #12
 8000caa:	4770      	bx	lr
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	ffff0208 	.word	0xffff0208

08000cb4 <__ssputs_r>:
 8000cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb8:	688e      	ldr	r6, [r1, #8]
 8000cba:	429e      	cmp	r6, r3
 8000cbc:	4682      	mov	sl, r0
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	4690      	mov	r8, r2
 8000cc2:	461f      	mov	r7, r3
 8000cc4:	d838      	bhi.n	8000d38 <__ssputs_r+0x84>
 8000cc6:	898a      	ldrh	r2, [r1, #12]
 8000cc8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000ccc:	d032      	beq.n	8000d34 <__ssputs_r+0x80>
 8000cce:	6825      	ldr	r5, [r4, #0]
 8000cd0:	6909      	ldr	r1, [r1, #16]
 8000cd2:	eba5 0901 	sub.w	r9, r5, r1
 8000cd6:	6965      	ldr	r5, [r4, #20]
 8000cd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000cdc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	444b      	add	r3, r9
 8000ce4:	106d      	asrs	r5, r5, #1
 8000ce6:	429d      	cmp	r5, r3
 8000ce8:	bf38      	it	cc
 8000cea:	461d      	movcc	r5, r3
 8000cec:	0553      	lsls	r3, r2, #21
 8000cee:	d531      	bpl.n	8000d54 <__ssputs_r+0xa0>
 8000cf0:	4629      	mov	r1, r5
 8000cf2:	f000 fb47 	bl	8001384 <_malloc_r>
 8000cf6:	4606      	mov	r6, r0
 8000cf8:	b950      	cbnz	r0, 8000d10 <__ssputs_r+0x5c>
 8000cfa:	230c      	movs	r3, #12
 8000cfc:	f8ca 3000 	str.w	r3, [sl]
 8000d00:	89a3      	ldrh	r3, [r4, #12]
 8000d02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d06:	81a3      	strh	r3, [r4, #12]
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d10:	6921      	ldr	r1, [r4, #16]
 8000d12:	464a      	mov	r2, r9
 8000d14:	f000 fabe 	bl	8001294 <memcpy>
 8000d18:	89a3      	ldrh	r3, [r4, #12]
 8000d1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d22:	81a3      	strh	r3, [r4, #12]
 8000d24:	6126      	str	r6, [r4, #16]
 8000d26:	6165      	str	r5, [r4, #20]
 8000d28:	444e      	add	r6, r9
 8000d2a:	eba5 0509 	sub.w	r5, r5, r9
 8000d2e:	6026      	str	r6, [r4, #0]
 8000d30:	60a5      	str	r5, [r4, #8]
 8000d32:	463e      	mov	r6, r7
 8000d34:	42be      	cmp	r6, r7
 8000d36:	d900      	bls.n	8000d3a <__ssputs_r+0x86>
 8000d38:	463e      	mov	r6, r7
 8000d3a:	4632      	mov	r2, r6
 8000d3c:	6820      	ldr	r0, [r4, #0]
 8000d3e:	4641      	mov	r1, r8
 8000d40:	f000 fab6 	bl	80012b0 <memmove>
 8000d44:	68a3      	ldr	r3, [r4, #8]
 8000d46:	6822      	ldr	r2, [r4, #0]
 8000d48:	1b9b      	subs	r3, r3, r6
 8000d4a:	4432      	add	r2, r6
 8000d4c:	60a3      	str	r3, [r4, #8]
 8000d4e:	6022      	str	r2, [r4, #0]
 8000d50:	2000      	movs	r0, #0
 8000d52:	e7db      	b.n	8000d0c <__ssputs_r+0x58>
 8000d54:	462a      	mov	r2, r5
 8000d56:	f000 fb6f 	bl	8001438 <_realloc_r>
 8000d5a:	4606      	mov	r6, r0
 8000d5c:	2800      	cmp	r0, #0
 8000d5e:	d1e1      	bne.n	8000d24 <__ssputs_r+0x70>
 8000d60:	6921      	ldr	r1, [r4, #16]
 8000d62:	4650      	mov	r0, sl
 8000d64:	f000 fabe 	bl	80012e4 <_free_r>
 8000d68:	e7c7      	b.n	8000cfa <__ssputs_r+0x46>
	...

08000d6c <_svfiprintf_r>:
 8000d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d70:	4698      	mov	r8, r3
 8000d72:	898b      	ldrh	r3, [r1, #12]
 8000d74:	061b      	lsls	r3, r3, #24
 8000d76:	b09d      	sub	sp, #116	; 0x74
 8000d78:	4607      	mov	r7, r0
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4614      	mov	r4, r2
 8000d7e:	d50e      	bpl.n	8000d9e <_svfiprintf_r+0x32>
 8000d80:	690b      	ldr	r3, [r1, #16]
 8000d82:	b963      	cbnz	r3, 8000d9e <_svfiprintf_r+0x32>
 8000d84:	2140      	movs	r1, #64	; 0x40
 8000d86:	f000 fafd 	bl	8001384 <_malloc_r>
 8000d8a:	6028      	str	r0, [r5, #0]
 8000d8c:	6128      	str	r0, [r5, #16]
 8000d8e:	b920      	cbnz	r0, 8000d9a <_svfiprintf_r+0x2e>
 8000d90:	230c      	movs	r3, #12
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295
 8000d98:	e0d1      	b.n	8000f3e <_svfiprintf_r+0x1d2>
 8000d9a:	2340      	movs	r3, #64	; 0x40
 8000d9c:	616b      	str	r3, [r5, #20]
 8000d9e:	2300      	movs	r3, #0
 8000da0:	9309      	str	r3, [sp, #36]	; 0x24
 8000da2:	2320      	movs	r3, #32
 8000da4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000da8:	f8cd 800c 	str.w	r8, [sp, #12]
 8000dac:	2330      	movs	r3, #48	; 0x30
 8000dae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000f58 <_svfiprintf_r+0x1ec>
 8000db2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000db6:	f04f 0901 	mov.w	r9, #1
 8000dba:	4623      	mov	r3, r4
 8000dbc:	469a      	mov	sl, r3
 8000dbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000dc2:	b10a      	cbz	r2, 8000dc8 <_svfiprintf_r+0x5c>
 8000dc4:	2a25      	cmp	r2, #37	; 0x25
 8000dc6:	d1f9      	bne.n	8000dbc <_svfiprintf_r+0x50>
 8000dc8:	ebba 0b04 	subs.w	fp, sl, r4
 8000dcc:	d00b      	beq.n	8000de6 <_svfiprintf_r+0x7a>
 8000dce:	465b      	mov	r3, fp
 8000dd0:	4622      	mov	r2, r4
 8000dd2:	4629      	mov	r1, r5
 8000dd4:	4638      	mov	r0, r7
 8000dd6:	f7ff ff6d 	bl	8000cb4 <__ssputs_r>
 8000dda:	3001      	adds	r0, #1
 8000ddc:	f000 80aa 	beq.w	8000f34 <_svfiprintf_r+0x1c8>
 8000de0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000de2:	445a      	add	r2, fp
 8000de4:	9209      	str	r2, [sp, #36]	; 0x24
 8000de6:	f89a 3000 	ldrb.w	r3, [sl]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f000 80a2 	beq.w	8000f34 <_svfiprintf_r+0x1c8>
 8000df0:	2300      	movs	r3, #0
 8000df2:	f04f 32ff 	mov.w	r2, #4294967295
 8000df6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000dfa:	f10a 0a01 	add.w	sl, sl, #1
 8000dfe:	9304      	str	r3, [sp, #16]
 8000e00:	9307      	str	r3, [sp, #28]
 8000e02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000e06:	931a      	str	r3, [sp, #104]	; 0x68
 8000e08:	4654      	mov	r4, sl
 8000e0a:	2205      	movs	r2, #5
 8000e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e10:	4851      	ldr	r0, [pc, #324]	; (8000f58 <_svfiprintf_r+0x1ec>)
 8000e12:	f7ff f9e5 	bl	80001e0 <memchr>
 8000e16:	9a04      	ldr	r2, [sp, #16]
 8000e18:	b9d8      	cbnz	r0, 8000e52 <_svfiprintf_r+0xe6>
 8000e1a:	06d0      	lsls	r0, r2, #27
 8000e1c:	bf44      	itt	mi
 8000e1e:	2320      	movmi	r3, #32
 8000e20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e24:	0711      	lsls	r1, r2, #28
 8000e26:	bf44      	itt	mi
 8000e28:	232b      	movmi	r3, #43	; 0x2b
 8000e2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e2e:	f89a 3000 	ldrb.w	r3, [sl]
 8000e32:	2b2a      	cmp	r3, #42	; 0x2a
 8000e34:	d015      	beq.n	8000e62 <_svfiprintf_r+0xf6>
 8000e36:	9a07      	ldr	r2, [sp, #28]
 8000e38:	4654      	mov	r4, sl
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f04f 0c0a 	mov.w	ip, #10
 8000e40:	4621      	mov	r1, r4
 8000e42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e46:	3b30      	subs	r3, #48	; 0x30
 8000e48:	2b09      	cmp	r3, #9
 8000e4a:	d94e      	bls.n	8000eea <_svfiprintf_r+0x17e>
 8000e4c:	b1b0      	cbz	r0, 8000e7c <_svfiprintf_r+0x110>
 8000e4e:	9207      	str	r2, [sp, #28]
 8000e50:	e014      	b.n	8000e7c <_svfiprintf_r+0x110>
 8000e52:	eba0 0308 	sub.w	r3, r0, r8
 8000e56:	fa09 f303 	lsl.w	r3, r9, r3
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	9304      	str	r3, [sp, #16]
 8000e5e:	46a2      	mov	sl, r4
 8000e60:	e7d2      	b.n	8000e08 <_svfiprintf_r+0x9c>
 8000e62:	9b03      	ldr	r3, [sp, #12]
 8000e64:	1d19      	adds	r1, r3, #4
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	9103      	str	r1, [sp, #12]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	bfbb      	ittet	lt
 8000e6e:	425b      	neglt	r3, r3
 8000e70:	f042 0202 	orrlt.w	r2, r2, #2
 8000e74:	9307      	strge	r3, [sp, #28]
 8000e76:	9307      	strlt	r3, [sp, #28]
 8000e78:	bfb8      	it	lt
 8000e7a:	9204      	strlt	r2, [sp, #16]
 8000e7c:	7823      	ldrb	r3, [r4, #0]
 8000e7e:	2b2e      	cmp	r3, #46	; 0x2e
 8000e80:	d10c      	bne.n	8000e9c <_svfiprintf_r+0x130>
 8000e82:	7863      	ldrb	r3, [r4, #1]
 8000e84:	2b2a      	cmp	r3, #42	; 0x2a
 8000e86:	d135      	bne.n	8000ef4 <_svfiprintf_r+0x188>
 8000e88:	9b03      	ldr	r3, [sp, #12]
 8000e8a:	1d1a      	adds	r2, r3, #4
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	9203      	str	r2, [sp, #12]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	bfb8      	it	lt
 8000e94:	f04f 33ff 	movlt.w	r3, #4294967295
 8000e98:	3402      	adds	r4, #2
 8000e9a:	9305      	str	r3, [sp, #20]
 8000e9c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000f68 <_svfiprintf_r+0x1fc>
 8000ea0:	7821      	ldrb	r1, [r4, #0]
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	4650      	mov	r0, sl
 8000ea6:	f7ff f99b 	bl	80001e0 <memchr>
 8000eaa:	b140      	cbz	r0, 8000ebe <_svfiprintf_r+0x152>
 8000eac:	2340      	movs	r3, #64	; 0x40
 8000eae:	eba0 000a 	sub.w	r0, r0, sl
 8000eb2:	fa03 f000 	lsl.w	r0, r3, r0
 8000eb6:	9b04      	ldr	r3, [sp, #16]
 8000eb8:	4303      	orrs	r3, r0
 8000eba:	3401      	adds	r4, #1
 8000ebc:	9304      	str	r3, [sp, #16]
 8000ebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ec2:	4826      	ldr	r0, [pc, #152]	; (8000f5c <_svfiprintf_r+0x1f0>)
 8000ec4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000ec8:	2206      	movs	r2, #6
 8000eca:	f7ff f989 	bl	80001e0 <memchr>
 8000ece:	2800      	cmp	r0, #0
 8000ed0:	d038      	beq.n	8000f44 <_svfiprintf_r+0x1d8>
 8000ed2:	4b23      	ldr	r3, [pc, #140]	; (8000f60 <_svfiprintf_r+0x1f4>)
 8000ed4:	bb1b      	cbnz	r3, 8000f1e <_svfiprintf_r+0x1b2>
 8000ed6:	9b03      	ldr	r3, [sp, #12]
 8000ed8:	3307      	adds	r3, #7
 8000eda:	f023 0307 	bic.w	r3, r3, #7
 8000ede:	3308      	adds	r3, #8
 8000ee0:	9303      	str	r3, [sp, #12]
 8000ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000ee4:	4433      	add	r3, r6
 8000ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8000ee8:	e767      	b.n	8000dba <_svfiprintf_r+0x4e>
 8000eea:	fb0c 3202 	mla	r2, ip, r2, r3
 8000eee:	460c      	mov	r4, r1
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	e7a5      	b.n	8000e40 <_svfiprintf_r+0xd4>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	3401      	adds	r4, #1
 8000ef8:	9305      	str	r3, [sp, #20]
 8000efa:	4619      	mov	r1, r3
 8000efc:	f04f 0c0a 	mov.w	ip, #10
 8000f00:	4620      	mov	r0, r4
 8000f02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f06:	3a30      	subs	r2, #48	; 0x30
 8000f08:	2a09      	cmp	r2, #9
 8000f0a:	d903      	bls.n	8000f14 <_svfiprintf_r+0x1a8>
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d0c5      	beq.n	8000e9c <_svfiprintf_r+0x130>
 8000f10:	9105      	str	r1, [sp, #20]
 8000f12:	e7c3      	b.n	8000e9c <_svfiprintf_r+0x130>
 8000f14:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f18:	4604      	mov	r4, r0
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e7f0      	b.n	8000f00 <_svfiprintf_r+0x194>
 8000f1e:	ab03      	add	r3, sp, #12
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	462a      	mov	r2, r5
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <_svfiprintf_r+0x1f8>)
 8000f26:	a904      	add	r1, sp, #16
 8000f28:	4638      	mov	r0, r7
 8000f2a:	f3af 8000 	nop.w
 8000f2e:	1c42      	adds	r2, r0, #1
 8000f30:	4606      	mov	r6, r0
 8000f32:	d1d6      	bne.n	8000ee2 <_svfiprintf_r+0x176>
 8000f34:	89ab      	ldrh	r3, [r5, #12]
 8000f36:	065b      	lsls	r3, r3, #25
 8000f38:	f53f af2c 	bmi.w	8000d94 <_svfiprintf_r+0x28>
 8000f3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000f3e:	b01d      	add	sp, #116	; 0x74
 8000f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f44:	ab03      	add	r3, sp, #12
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	462a      	mov	r2, r5
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <_svfiprintf_r+0x1f8>)
 8000f4c:	a904      	add	r1, sp, #16
 8000f4e:	4638      	mov	r0, r7
 8000f50:	f000 f87a 	bl	8001048 <_printf_i>
 8000f54:	e7eb      	b.n	8000f2e <_svfiprintf_r+0x1c2>
 8000f56:	bf00      	nop
 8000f58:	08001524 	.word	0x08001524
 8000f5c:	0800152e 	.word	0x0800152e
 8000f60:	00000000 	.word	0x00000000
 8000f64:	08000cb5 	.word	0x08000cb5
 8000f68:	0800152a 	.word	0x0800152a

08000f6c <_printf_common>:
 8000f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f70:	4616      	mov	r6, r2
 8000f72:	4699      	mov	r9, r3
 8000f74:	688a      	ldr	r2, [r1, #8]
 8000f76:	690b      	ldr	r3, [r1, #16]
 8000f78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	bfb8      	it	lt
 8000f80:	4613      	movlt	r3, r2
 8000f82:	6033      	str	r3, [r6, #0]
 8000f84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000f88:	4607      	mov	r7, r0
 8000f8a:	460c      	mov	r4, r1
 8000f8c:	b10a      	cbz	r2, 8000f92 <_printf_common+0x26>
 8000f8e:	3301      	adds	r3, #1
 8000f90:	6033      	str	r3, [r6, #0]
 8000f92:	6823      	ldr	r3, [r4, #0]
 8000f94:	0699      	lsls	r1, r3, #26
 8000f96:	bf42      	ittt	mi
 8000f98:	6833      	ldrmi	r3, [r6, #0]
 8000f9a:	3302      	addmi	r3, #2
 8000f9c:	6033      	strmi	r3, [r6, #0]
 8000f9e:	6825      	ldr	r5, [r4, #0]
 8000fa0:	f015 0506 	ands.w	r5, r5, #6
 8000fa4:	d106      	bne.n	8000fb4 <_printf_common+0x48>
 8000fa6:	f104 0a19 	add.w	sl, r4, #25
 8000faa:	68e3      	ldr	r3, [r4, #12]
 8000fac:	6832      	ldr	r2, [r6, #0]
 8000fae:	1a9b      	subs	r3, r3, r2
 8000fb0:	42ab      	cmp	r3, r5
 8000fb2:	dc26      	bgt.n	8001002 <_printf_common+0x96>
 8000fb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000fb8:	1e13      	subs	r3, r2, #0
 8000fba:	6822      	ldr	r2, [r4, #0]
 8000fbc:	bf18      	it	ne
 8000fbe:	2301      	movne	r3, #1
 8000fc0:	0692      	lsls	r2, r2, #26
 8000fc2:	d42b      	bmi.n	800101c <_printf_common+0xb0>
 8000fc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000fc8:	4649      	mov	r1, r9
 8000fca:	4638      	mov	r0, r7
 8000fcc:	47c0      	blx	r8
 8000fce:	3001      	adds	r0, #1
 8000fd0:	d01e      	beq.n	8001010 <_printf_common+0xa4>
 8000fd2:	6823      	ldr	r3, [r4, #0]
 8000fd4:	68e5      	ldr	r5, [r4, #12]
 8000fd6:	6832      	ldr	r2, [r6, #0]
 8000fd8:	f003 0306 	and.w	r3, r3, #6
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	bf08      	it	eq
 8000fe0:	1aad      	subeq	r5, r5, r2
 8000fe2:	68a3      	ldr	r3, [r4, #8]
 8000fe4:	6922      	ldr	r2, [r4, #16]
 8000fe6:	bf0c      	ite	eq
 8000fe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000fec:	2500      	movne	r5, #0
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	bfc4      	itt	gt
 8000ff2:	1a9b      	subgt	r3, r3, r2
 8000ff4:	18ed      	addgt	r5, r5, r3
 8000ff6:	2600      	movs	r6, #0
 8000ff8:	341a      	adds	r4, #26
 8000ffa:	42b5      	cmp	r5, r6
 8000ffc:	d11a      	bne.n	8001034 <_printf_common+0xc8>
 8000ffe:	2000      	movs	r0, #0
 8001000:	e008      	b.n	8001014 <_printf_common+0xa8>
 8001002:	2301      	movs	r3, #1
 8001004:	4652      	mov	r2, sl
 8001006:	4649      	mov	r1, r9
 8001008:	4638      	mov	r0, r7
 800100a:	47c0      	blx	r8
 800100c:	3001      	adds	r0, #1
 800100e:	d103      	bne.n	8001018 <_printf_common+0xac>
 8001010:	f04f 30ff 	mov.w	r0, #4294967295
 8001014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001018:	3501      	adds	r5, #1
 800101a:	e7c6      	b.n	8000faa <_printf_common+0x3e>
 800101c:	18e1      	adds	r1, r4, r3
 800101e:	1c5a      	adds	r2, r3, #1
 8001020:	2030      	movs	r0, #48	; 0x30
 8001022:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001026:	4422      	add	r2, r4
 8001028:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800102c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001030:	3302      	adds	r3, #2
 8001032:	e7c7      	b.n	8000fc4 <_printf_common+0x58>
 8001034:	2301      	movs	r3, #1
 8001036:	4622      	mov	r2, r4
 8001038:	4649      	mov	r1, r9
 800103a:	4638      	mov	r0, r7
 800103c:	47c0      	blx	r8
 800103e:	3001      	adds	r0, #1
 8001040:	d0e6      	beq.n	8001010 <_printf_common+0xa4>
 8001042:	3601      	adds	r6, #1
 8001044:	e7d9      	b.n	8000ffa <_printf_common+0x8e>
	...

08001048 <_printf_i>:
 8001048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800104c:	460c      	mov	r4, r1
 800104e:	4691      	mov	r9, r2
 8001050:	7e27      	ldrb	r7, [r4, #24]
 8001052:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001054:	2f78      	cmp	r7, #120	; 0x78
 8001056:	4680      	mov	r8, r0
 8001058:	469a      	mov	sl, r3
 800105a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800105e:	d807      	bhi.n	8001070 <_printf_i+0x28>
 8001060:	2f62      	cmp	r7, #98	; 0x62
 8001062:	d80a      	bhi.n	800107a <_printf_i+0x32>
 8001064:	2f00      	cmp	r7, #0
 8001066:	f000 80d8 	beq.w	800121a <_printf_i+0x1d2>
 800106a:	2f58      	cmp	r7, #88	; 0x58
 800106c:	f000 80a3 	beq.w	80011b6 <_printf_i+0x16e>
 8001070:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001074:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001078:	e03a      	b.n	80010f0 <_printf_i+0xa8>
 800107a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800107e:	2b15      	cmp	r3, #21
 8001080:	d8f6      	bhi.n	8001070 <_printf_i+0x28>
 8001082:	a001      	add	r0, pc, #4	; (adr r0, 8001088 <_printf_i+0x40>)
 8001084:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001088:	080010e1 	.word	0x080010e1
 800108c:	080010f5 	.word	0x080010f5
 8001090:	08001071 	.word	0x08001071
 8001094:	08001071 	.word	0x08001071
 8001098:	08001071 	.word	0x08001071
 800109c:	08001071 	.word	0x08001071
 80010a0:	080010f5 	.word	0x080010f5
 80010a4:	08001071 	.word	0x08001071
 80010a8:	08001071 	.word	0x08001071
 80010ac:	08001071 	.word	0x08001071
 80010b0:	08001071 	.word	0x08001071
 80010b4:	08001201 	.word	0x08001201
 80010b8:	08001125 	.word	0x08001125
 80010bc:	080011e3 	.word	0x080011e3
 80010c0:	08001071 	.word	0x08001071
 80010c4:	08001071 	.word	0x08001071
 80010c8:	08001223 	.word	0x08001223
 80010cc:	08001071 	.word	0x08001071
 80010d0:	08001125 	.word	0x08001125
 80010d4:	08001071 	.word	0x08001071
 80010d8:	08001071 	.word	0x08001071
 80010dc:	080011eb 	.word	0x080011eb
 80010e0:	680b      	ldr	r3, [r1, #0]
 80010e2:	1d1a      	adds	r2, r3, #4
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	600a      	str	r2, [r1, #0]
 80010e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80010ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80010f0:	2301      	movs	r3, #1
 80010f2:	e0a3      	b.n	800123c <_printf_i+0x1f4>
 80010f4:	6825      	ldr	r5, [r4, #0]
 80010f6:	6808      	ldr	r0, [r1, #0]
 80010f8:	062e      	lsls	r6, r5, #24
 80010fa:	f100 0304 	add.w	r3, r0, #4
 80010fe:	d50a      	bpl.n	8001116 <_printf_i+0xce>
 8001100:	6805      	ldr	r5, [r0, #0]
 8001102:	600b      	str	r3, [r1, #0]
 8001104:	2d00      	cmp	r5, #0
 8001106:	da03      	bge.n	8001110 <_printf_i+0xc8>
 8001108:	232d      	movs	r3, #45	; 0x2d
 800110a:	426d      	negs	r5, r5
 800110c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001110:	485e      	ldr	r0, [pc, #376]	; (800128c <_printf_i+0x244>)
 8001112:	230a      	movs	r3, #10
 8001114:	e019      	b.n	800114a <_printf_i+0x102>
 8001116:	f015 0f40 	tst.w	r5, #64	; 0x40
 800111a:	6805      	ldr	r5, [r0, #0]
 800111c:	600b      	str	r3, [r1, #0]
 800111e:	bf18      	it	ne
 8001120:	b22d      	sxthne	r5, r5
 8001122:	e7ef      	b.n	8001104 <_printf_i+0xbc>
 8001124:	680b      	ldr	r3, [r1, #0]
 8001126:	6825      	ldr	r5, [r4, #0]
 8001128:	1d18      	adds	r0, r3, #4
 800112a:	6008      	str	r0, [r1, #0]
 800112c:	0628      	lsls	r0, r5, #24
 800112e:	d501      	bpl.n	8001134 <_printf_i+0xec>
 8001130:	681d      	ldr	r5, [r3, #0]
 8001132:	e002      	b.n	800113a <_printf_i+0xf2>
 8001134:	0669      	lsls	r1, r5, #25
 8001136:	d5fb      	bpl.n	8001130 <_printf_i+0xe8>
 8001138:	881d      	ldrh	r5, [r3, #0]
 800113a:	4854      	ldr	r0, [pc, #336]	; (800128c <_printf_i+0x244>)
 800113c:	2f6f      	cmp	r7, #111	; 0x6f
 800113e:	bf0c      	ite	eq
 8001140:	2308      	moveq	r3, #8
 8001142:	230a      	movne	r3, #10
 8001144:	2100      	movs	r1, #0
 8001146:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800114a:	6866      	ldr	r6, [r4, #4]
 800114c:	60a6      	str	r6, [r4, #8]
 800114e:	2e00      	cmp	r6, #0
 8001150:	bfa2      	ittt	ge
 8001152:	6821      	ldrge	r1, [r4, #0]
 8001154:	f021 0104 	bicge.w	r1, r1, #4
 8001158:	6021      	strge	r1, [r4, #0]
 800115a:	b90d      	cbnz	r5, 8001160 <_printf_i+0x118>
 800115c:	2e00      	cmp	r6, #0
 800115e:	d04d      	beq.n	80011fc <_printf_i+0x1b4>
 8001160:	4616      	mov	r6, r2
 8001162:	fbb5 f1f3 	udiv	r1, r5, r3
 8001166:	fb03 5711 	mls	r7, r3, r1, r5
 800116a:	5dc7      	ldrb	r7, [r0, r7]
 800116c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001170:	462f      	mov	r7, r5
 8001172:	42bb      	cmp	r3, r7
 8001174:	460d      	mov	r5, r1
 8001176:	d9f4      	bls.n	8001162 <_printf_i+0x11a>
 8001178:	2b08      	cmp	r3, #8
 800117a:	d10b      	bne.n	8001194 <_printf_i+0x14c>
 800117c:	6823      	ldr	r3, [r4, #0]
 800117e:	07df      	lsls	r7, r3, #31
 8001180:	d508      	bpl.n	8001194 <_printf_i+0x14c>
 8001182:	6923      	ldr	r3, [r4, #16]
 8001184:	6861      	ldr	r1, [r4, #4]
 8001186:	4299      	cmp	r1, r3
 8001188:	bfde      	ittt	le
 800118a:	2330      	movle	r3, #48	; 0x30
 800118c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001190:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001194:	1b92      	subs	r2, r2, r6
 8001196:	6122      	str	r2, [r4, #16]
 8001198:	f8cd a000 	str.w	sl, [sp]
 800119c:	464b      	mov	r3, r9
 800119e:	aa03      	add	r2, sp, #12
 80011a0:	4621      	mov	r1, r4
 80011a2:	4640      	mov	r0, r8
 80011a4:	f7ff fee2 	bl	8000f6c <_printf_common>
 80011a8:	3001      	adds	r0, #1
 80011aa:	d14c      	bne.n	8001246 <_printf_i+0x1fe>
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295
 80011b0:	b004      	add	sp, #16
 80011b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011b6:	4835      	ldr	r0, [pc, #212]	; (800128c <_printf_i+0x244>)
 80011b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80011bc:	6823      	ldr	r3, [r4, #0]
 80011be:	680e      	ldr	r6, [r1, #0]
 80011c0:	061f      	lsls	r7, r3, #24
 80011c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80011c6:	600e      	str	r6, [r1, #0]
 80011c8:	d514      	bpl.n	80011f4 <_printf_i+0x1ac>
 80011ca:	07d9      	lsls	r1, r3, #31
 80011cc:	bf44      	itt	mi
 80011ce:	f043 0320 	orrmi.w	r3, r3, #32
 80011d2:	6023      	strmi	r3, [r4, #0]
 80011d4:	b91d      	cbnz	r5, 80011de <_printf_i+0x196>
 80011d6:	6823      	ldr	r3, [r4, #0]
 80011d8:	f023 0320 	bic.w	r3, r3, #32
 80011dc:	6023      	str	r3, [r4, #0]
 80011de:	2310      	movs	r3, #16
 80011e0:	e7b0      	b.n	8001144 <_printf_i+0xfc>
 80011e2:	6823      	ldr	r3, [r4, #0]
 80011e4:	f043 0320 	orr.w	r3, r3, #32
 80011e8:	6023      	str	r3, [r4, #0]
 80011ea:	2378      	movs	r3, #120	; 0x78
 80011ec:	4828      	ldr	r0, [pc, #160]	; (8001290 <_printf_i+0x248>)
 80011ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80011f2:	e7e3      	b.n	80011bc <_printf_i+0x174>
 80011f4:	065e      	lsls	r6, r3, #25
 80011f6:	bf48      	it	mi
 80011f8:	b2ad      	uxthmi	r5, r5
 80011fa:	e7e6      	b.n	80011ca <_printf_i+0x182>
 80011fc:	4616      	mov	r6, r2
 80011fe:	e7bb      	b.n	8001178 <_printf_i+0x130>
 8001200:	680b      	ldr	r3, [r1, #0]
 8001202:	6826      	ldr	r6, [r4, #0]
 8001204:	6960      	ldr	r0, [r4, #20]
 8001206:	1d1d      	adds	r5, r3, #4
 8001208:	600d      	str	r5, [r1, #0]
 800120a:	0635      	lsls	r5, r6, #24
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	d501      	bpl.n	8001214 <_printf_i+0x1cc>
 8001210:	6018      	str	r0, [r3, #0]
 8001212:	e002      	b.n	800121a <_printf_i+0x1d2>
 8001214:	0671      	lsls	r1, r6, #25
 8001216:	d5fb      	bpl.n	8001210 <_printf_i+0x1c8>
 8001218:	8018      	strh	r0, [r3, #0]
 800121a:	2300      	movs	r3, #0
 800121c:	6123      	str	r3, [r4, #16]
 800121e:	4616      	mov	r6, r2
 8001220:	e7ba      	b.n	8001198 <_printf_i+0x150>
 8001222:	680b      	ldr	r3, [r1, #0]
 8001224:	1d1a      	adds	r2, r3, #4
 8001226:	600a      	str	r2, [r1, #0]
 8001228:	681e      	ldr	r6, [r3, #0]
 800122a:	6862      	ldr	r2, [r4, #4]
 800122c:	2100      	movs	r1, #0
 800122e:	4630      	mov	r0, r6
 8001230:	f7fe ffd6 	bl	80001e0 <memchr>
 8001234:	b108      	cbz	r0, 800123a <_printf_i+0x1f2>
 8001236:	1b80      	subs	r0, r0, r6
 8001238:	6060      	str	r0, [r4, #4]
 800123a:	6863      	ldr	r3, [r4, #4]
 800123c:	6123      	str	r3, [r4, #16]
 800123e:	2300      	movs	r3, #0
 8001240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001244:	e7a8      	b.n	8001198 <_printf_i+0x150>
 8001246:	6923      	ldr	r3, [r4, #16]
 8001248:	4632      	mov	r2, r6
 800124a:	4649      	mov	r1, r9
 800124c:	4640      	mov	r0, r8
 800124e:	47d0      	blx	sl
 8001250:	3001      	adds	r0, #1
 8001252:	d0ab      	beq.n	80011ac <_printf_i+0x164>
 8001254:	6823      	ldr	r3, [r4, #0]
 8001256:	079b      	lsls	r3, r3, #30
 8001258:	d413      	bmi.n	8001282 <_printf_i+0x23a>
 800125a:	68e0      	ldr	r0, [r4, #12]
 800125c:	9b03      	ldr	r3, [sp, #12]
 800125e:	4298      	cmp	r0, r3
 8001260:	bfb8      	it	lt
 8001262:	4618      	movlt	r0, r3
 8001264:	e7a4      	b.n	80011b0 <_printf_i+0x168>
 8001266:	2301      	movs	r3, #1
 8001268:	4632      	mov	r2, r6
 800126a:	4649      	mov	r1, r9
 800126c:	4640      	mov	r0, r8
 800126e:	47d0      	blx	sl
 8001270:	3001      	adds	r0, #1
 8001272:	d09b      	beq.n	80011ac <_printf_i+0x164>
 8001274:	3501      	adds	r5, #1
 8001276:	68e3      	ldr	r3, [r4, #12]
 8001278:	9903      	ldr	r1, [sp, #12]
 800127a:	1a5b      	subs	r3, r3, r1
 800127c:	42ab      	cmp	r3, r5
 800127e:	dcf2      	bgt.n	8001266 <_printf_i+0x21e>
 8001280:	e7eb      	b.n	800125a <_printf_i+0x212>
 8001282:	2500      	movs	r5, #0
 8001284:	f104 0619 	add.w	r6, r4, #25
 8001288:	e7f5      	b.n	8001276 <_printf_i+0x22e>
 800128a:	bf00      	nop
 800128c:	08001535 	.word	0x08001535
 8001290:	08001546 	.word	0x08001546

08001294 <memcpy>:
 8001294:	440a      	add	r2, r1
 8001296:	4291      	cmp	r1, r2
 8001298:	f100 33ff 	add.w	r3, r0, #4294967295
 800129c:	d100      	bne.n	80012a0 <memcpy+0xc>
 800129e:	4770      	bx	lr
 80012a0:	b510      	push	{r4, lr}
 80012a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80012a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80012aa:	4291      	cmp	r1, r2
 80012ac:	d1f9      	bne.n	80012a2 <memcpy+0xe>
 80012ae:	bd10      	pop	{r4, pc}

080012b0 <memmove>:
 80012b0:	4288      	cmp	r0, r1
 80012b2:	b510      	push	{r4, lr}
 80012b4:	eb01 0402 	add.w	r4, r1, r2
 80012b8:	d902      	bls.n	80012c0 <memmove+0x10>
 80012ba:	4284      	cmp	r4, r0
 80012bc:	4623      	mov	r3, r4
 80012be:	d807      	bhi.n	80012d0 <memmove+0x20>
 80012c0:	1e43      	subs	r3, r0, #1
 80012c2:	42a1      	cmp	r1, r4
 80012c4:	d008      	beq.n	80012d8 <memmove+0x28>
 80012c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80012ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80012ce:	e7f8      	b.n	80012c2 <memmove+0x12>
 80012d0:	4402      	add	r2, r0
 80012d2:	4601      	mov	r1, r0
 80012d4:	428a      	cmp	r2, r1
 80012d6:	d100      	bne.n	80012da <memmove+0x2a>
 80012d8:	bd10      	pop	{r4, pc}
 80012da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80012de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80012e2:	e7f7      	b.n	80012d4 <memmove+0x24>

080012e4 <_free_r>:
 80012e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80012e6:	2900      	cmp	r1, #0
 80012e8:	d048      	beq.n	800137c <_free_r+0x98>
 80012ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80012ee:	9001      	str	r0, [sp, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f1a1 0404 	sub.w	r4, r1, #4
 80012f6:	bfb8      	it	lt
 80012f8:	18e4      	addlt	r4, r4, r3
 80012fa:	f000 f8d3 	bl	80014a4 <__malloc_lock>
 80012fe:	4a20      	ldr	r2, [pc, #128]	; (8001380 <_free_r+0x9c>)
 8001300:	9801      	ldr	r0, [sp, #4]
 8001302:	6813      	ldr	r3, [r2, #0]
 8001304:	4615      	mov	r5, r2
 8001306:	b933      	cbnz	r3, 8001316 <_free_r+0x32>
 8001308:	6063      	str	r3, [r4, #4]
 800130a:	6014      	str	r4, [r2, #0]
 800130c:	b003      	add	sp, #12
 800130e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001312:	f000 b8cd 	b.w	80014b0 <__malloc_unlock>
 8001316:	42a3      	cmp	r3, r4
 8001318:	d90b      	bls.n	8001332 <_free_r+0x4e>
 800131a:	6821      	ldr	r1, [r4, #0]
 800131c:	1862      	adds	r2, r4, r1
 800131e:	4293      	cmp	r3, r2
 8001320:	bf04      	itt	eq
 8001322:	681a      	ldreq	r2, [r3, #0]
 8001324:	685b      	ldreq	r3, [r3, #4]
 8001326:	6063      	str	r3, [r4, #4]
 8001328:	bf04      	itt	eq
 800132a:	1852      	addeq	r2, r2, r1
 800132c:	6022      	streq	r2, [r4, #0]
 800132e:	602c      	str	r4, [r5, #0]
 8001330:	e7ec      	b.n	800130c <_free_r+0x28>
 8001332:	461a      	mov	r2, r3
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	b10b      	cbz	r3, 800133c <_free_r+0x58>
 8001338:	42a3      	cmp	r3, r4
 800133a:	d9fa      	bls.n	8001332 <_free_r+0x4e>
 800133c:	6811      	ldr	r1, [r2, #0]
 800133e:	1855      	adds	r5, r2, r1
 8001340:	42a5      	cmp	r5, r4
 8001342:	d10b      	bne.n	800135c <_free_r+0x78>
 8001344:	6824      	ldr	r4, [r4, #0]
 8001346:	4421      	add	r1, r4
 8001348:	1854      	adds	r4, r2, r1
 800134a:	42a3      	cmp	r3, r4
 800134c:	6011      	str	r1, [r2, #0]
 800134e:	d1dd      	bne.n	800130c <_free_r+0x28>
 8001350:	681c      	ldr	r4, [r3, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	6053      	str	r3, [r2, #4]
 8001356:	4421      	add	r1, r4
 8001358:	6011      	str	r1, [r2, #0]
 800135a:	e7d7      	b.n	800130c <_free_r+0x28>
 800135c:	d902      	bls.n	8001364 <_free_r+0x80>
 800135e:	230c      	movs	r3, #12
 8001360:	6003      	str	r3, [r0, #0]
 8001362:	e7d3      	b.n	800130c <_free_r+0x28>
 8001364:	6825      	ldr	r5, [r4, #0]
 8001366:	1961      	adds	r1, r4, r5
 8001368:	428b      	cmp	r3, r1
 800136a:	bf04      	itt	eq
 800136c:	6819      	ldreq	r1, [r3, #0]
 800136e:	685b      	ldreq	r3, [r3, #4]
 8001370:	6063      	str	r3, [r4, #4]
 8001372:	bf04      	itt	eq
 8001374:	1949      	addeq	r1, r1, r5
 8001376:	6021      	streq	r1, [r4, #0]
 8001378:	6054      	str	r4, [r2, #4]
 800137a:	e7c7      	b.n	800130c <_free_r+0x28>
 800137c:	b003      	add	sp, #12
 800137e:	bd30      	pop	{r4, r5, pc}
 8001380:	2000008c 	.word	0x2000008c

08001384 <_malloc_r>:
 8001384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001386:	1ccd      	adds	r5, r1, #3
 8001388:	f025 0503 	bic.w	r5, r5, #3
 800138c:	3508      	adds	r5, #8
 800138e:	2d0c      	cmp	r5, #12
 8001390:	bf38      	it	cc
 8001392:	250c      	movcc	r5, #12
 8001394:	2d00      	cmp	r5, #0
 8001396:	4606      	mov	r6, r0
 8001398:	db01      	blt.n	800139e <_malloc_r+0x1a>
 800139a:	42a9      	cmp	r1, r5
 800139c:	d903      	bls.n	80013a6 <_malloc_r+0x22>
 800139e:	230c      	movs	r3, #12
 80013a0:	6033      	str	r3, [r6, #0]
 80013a2:	2000      	movs	r0, #0
 80013a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013a6:	f000 f87d 	bl	80014a4 <__malloc_lock>
 80013aa:	4921      	ldr	r1, [pc, #132]	; (8001430 <_malloc_r+0xac>)
 80013ac:	680a      	ldr	r2, [r1, #0]
 80013ae:	4614      	mov	r4, r2
 80013b0:	b99c      	cbnz	r4, 80013da <_malloc_r+0x56>
 80013b2:	4f20      	ldr	r7, [pc, #128]	; (8001434 <_malloc_r+0xb0>)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	b923      	cbnz	r3, 80013c2 <_malloc_r+0x3e>
 80013b8:	4621      	mov	r1, r4
 80013ba:	4630      	mov	r0, r6
 80013bc:	f000 f862 	bl	8001484 <_sbrk_r>
 80013c0:	6038      	str	r0, [r7, #0]
 80013c2:	4629      	mov	r1, r5
 80013c4:	4630      	mov	r0, r6
 80013c6:	f000 f85d 	bl	8001484 <_sbrk_r>
 80013ca:	1c43      	adds	r3, r0, #1
 80013cc:	d123      	bne.n	8001416 <_malloc_r+0x92>
 80013ce:	230c      	movs	r3, #12
 80013d0:	6033      	str	r3, [r6, #0]
 80013d2:	4630      	mov	r0, r6
 80013d4:	f000 f86c 	bl	80014b0 <__malloc_unlock>
 80013d8:	e7e3      	b.n	80013a2 <_malloc_r+0x1e>
 80013da:	6823      	ldr	r3, [r4, #0]
 80013dc:	1b5b      	subs	r3, r3, r5
 80013de:	d417      	bmi.n	8001410 <_malloc_r+0x8c>
 80013e0:	2b0b      	cmp	r3, #11
 80013e2:	d903      	bls.n	80013ec <_malloc_r+0x68>
 80013e4:	6023      	str	r3, [r4, #0]
 80013e6:	441c      	add	r4, r3
 80013e8:	6025      	str	r5, [r4, #0]
 80013ea:	e004      	b.n	80013f6 <_malloc_r+0x72>
 80013ec:	6863      	ldr	r3, [r4, #4]
 80013ee:	42a2      	cmp	r2, r4
 80013f0:	bf0c      	ite	eq
 80013f2:	600b      	streq	r3, [r1, #0]
 80013f4:	6053      	strne	r3, [r2, #4]
 80013f6:	4630      	mov	r0, r6
 80013f8:	f000 f85a 	bl	80014b0 <__malloc_unlock>
 80013fc:	f104 000b 	add.w	r0, r4, #11
 8001400:	1d23      	adds	r3, r4, #4
 8001402:	f020 0007 	bic.w	r0, r0, #7
 8001406:	1ac2      	subs	r2, r0, r3
 8001408:	d0cc      	beq.n	80013a4 <_malloc_r+0x20>
 800140a:	1a1b      	subs	r3, r3, r0
 800140c:	50a3      	str	r3, [r4, r2]
 800140e:	e7c9      	b.n	80013a4 <_malloc_r+0x20>
 8001410:	4622      	mov	r2, r4
 8001412:	6864      	ldr	r4, [r4, #4]
 8001414:	e7cc      	b.n	80013b0 <_malloc_r+0x2c>
 8001416:	1cc4      	adds	r4, r0, #3
 8001418:	f024 0403 	bic.w	r4, r4, #3
 800141c:	42a0      	cmp	r0, r4
 800141e:	d0e3      	beq.n	80013e8 <_malloc_r+0x64>
 8001420:	1a21      	subs	r1, r4, r0
 8001422:	4630      	mov	r0, r6
 8001424:	f000 f82e 	bl	8001484 <_sbrk_r>
 8001428:	3001      	adds	r0, #1
 800142a:	d1dd      	bne.n	80013e8 <_malloc_r+0x64>
 800142c:	e7cf      	b.n	80013ce <_malloc_r+0x4a>
 800142e:	bf00      	nop
 8001430:	2000008c 	.word	0x2000008c
 8001434:	20000090 	.word	0x20000090

08001438 <_realloc_r>:
 8001438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800143a:	4607      	mov	r7, r0
 800143c:	4614      	mov	r4, r2
 800143e:	460e      	mov	r6, r1
 8001440:	b921      	cbnz	r1, 800144c <_realloc_r+0x14>
 8001442:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001446:	4611      	mov	r1, r2
 8001448:	f7ff bf9c 	b.w	8001384 <_malloc_r>
 800144c:	b922      	cbnz	r2, 8001458 <_realloc_r+0x20>
 800144e:	f7ff ff49 	bl	80012e4 <_free_r>
 8001452:	4625      	mov	r5, r4
 8001454:	4628      	mov	r0, r5
 8001456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001458:	f000 f830 	bl	80014bc <_malloc_usable_size_r>
 800145c:	42a0      	cmp	r0, r4
 800145e:	d20f      	bcs.n	8001480 <_realloc_r+0x48>
 8001460:	4621      	mov	r1, r4
 8001462:	4638      	mov	r0, r7
 8001464:	f7ff ff8e 	bl	8001384 <_malloc_r>
 8001468:	4605      	mov	r5, r0
 800146a:	2800      	cmp	r0, #0
 800146c:	d0f2      	beq.n	8001454 <_realloc_r+0x1c>
 800146e:	4631      	mov	r1, r6
 8001470:	4622      	mov	r2, r4
 8001472:	f7ff ff0f 	bl	8001294 <memcpy>
 8001476:	4631      	mov	r1, r6
 8001478:	4638      	mov	r0, r7
 800147a:	f7ff ff33 	bl	80012e4 <_free_r>
 800147e:	e7e9      	b.n	8001454 <_realloc_r+0x1c>
 8001480:	4635      	mov	r5, r6
 8001482:	e7e7      	b.n	8001454 <_realloc_r+0x1c>

08001484 <_sbrk_r>:
 8001484:	b538      	push	{r3, r4, r5, lr}
 8001486:	4d06      	ldr	r5, [pc, #24]	; (80014a0 <_sbrk_r+0x1c>)
 8001488:	2300      	movs	r3, #0
 800148a:	4604      	mov	r4, r0
 800148c:	4608      	mov	r0, r1
 800148e:	602b      	str	r3, [r5, #0]
 8001490:	f000 f81e 	bl	80014d0 <_sbrk>
 8001494:	1c43      	adds	r3, r0, #1
 8001496:	d102      	bne.n	800149e <_sbrk_r+0x1a>
 8001498:	682b      	ldr	r3, [r5, #0]
 800149a:	b103      	cbz	r3, 800149e <_sbrk_r+0x1a>
 800149c:	6023      	str	r3, [r4, #0]
 800149e:	bd38      	pop	{r3, r4, r5, pc}
 80014a0:	20000164 	.word	0x20000164

080014a4 <__malloc_lock>:
 80014a4:	4801      	ldr	r0, [pc, #4]	; (80014ac <__malloc_lock+0x8>)
 80014a6:	f000 b811 	b.w	80014cc <__retarget_lock_acquire_recursive>
 80014aa:	bf00      	nop
 80014ac:	2000016c 	.word	0x2000016c

080014b0 <__malloc_unlock>:
 80014b0:	4801      	ldr	r0, [pc, #4]	; (80014b8 <__malloc_unlock+0x8>)
 80014b2:	f000 b80c 	b.w	80014ce <__retarget_lock_release_recursive>
 80014b6:	bf00      	nop
 80014b8:	2000016c 	.word	0x2000016c

080014bc <_malloc_usable_size_r>:
 80014bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80014c0:	1f18      	subs	r0, r3, #4
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	bfbc      	itt	lt
 80014c6:	580b      	ldrlt	r3, [r1, r0]
 80014c8:	18c0      	addlt	r0, r0, r3
 80014ca:	4770      	bx	lr

080014cc <__retarget_lock_acquire_recursive>:
 80014cc:	4770      	bx	lr

080014ce <__retarget_lock_release_recursive>:
 80014ce:	4770      	bx	lr

080014d0 <_sbrk>:
 80014d0:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <_sbrk+0x14>)
 80014d2:	6819      	ldr	r1, [r3, #0]
 80014d4:	4602      	mov	r2, r0
 80014d6:	b909      	cbnz	r1, 80014dc <_sbrk+0xc>
 80014d8:	4903      	ldr	r1, [pc, #12]	; (80014e8 <_sbrk+0x18>)
 80014da:	6019      	str	r1, [r3, #0]
 80014dc:	6818      	ldr	r0, [r3, #0]
 80014de:	4402      	add	r2, r0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	4770      	bx	lr
 80014e4:	20000094 	.word	0x20000094
 80014e8:	20000178 	.word	0x20000178

080014ec <_init>:
 80014ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ee:	bf00      	nop
 80014f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014f2:	bc08      	pop	{r3}
 80014f4:	469e      	mov	lr, r3
 80014f6:	4770      	bx	lr

080014f8 <_fini>:
 80014f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014fa:	bf00      	nop
 80014fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014fe:	bc08      	pop	{r3}
 8001500:	469e      	mov	lr, r3
 8001502:	4770      	bx	lr
